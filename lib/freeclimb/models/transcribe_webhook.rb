=begin
#FreeClimb API

#FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

The version of the OpenAPI document: 1.0.0
Contact: support@freeclimb.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.9.0

=end

require 'date'
require 'time'

module Freeclimb
  class TranscribeWebhook < Webhook
    def self.deserialize(payload)
      return nil if payload.nil? || payload.empty?
      data = JSON.parse("[#{payload}]")[0]
      inverted_attributes = self.attribute_map.invert
      hash = self.acceptable_attributes.uniq.map { |k| [inverted_attributes[k], data[k.to_s]] }.to_h
      TranscribeWebhook.new(hash)
    end
    # The context or reason why this request is being made. Will be transcribe - The TranscribeUtterance command has completed and its actionUrl is being invoked.
    attr_accessor :request_type

    # Account ID associated with your account.
    attr_accessor :account_id

    # Unique identifier for this Call, generated by FreeClimb
    attr_accessor :call_id

    # Phone number of the party that initiated the Call (in E.164 format).
    attr_accessor :from

    # Phone number provisioned to the customer and to which this Call is directed (in E.164 format).
    attr_accessor :to

    # The ID of the recording. If no recording was made due to errors or the 'saveRecording' flag being disabled this field will be set to null.
    attr_accessor :recording_id

    # The URL of the recorded audio file. This URL can be used as is in a Play command to play the recording (no authentication needed). It can also be used to download the recording file via the REST API.
    attr_accessor :recording_url

    # The size of the recording in bytes.
    attr_accessor :recording_size

    # The media type of the recording.
    attr_accessor :recording_format

    # The duration of the recorded audio in milliseconds.
    attr_accessor :recording_duration_ms

    attr_accessor :term_reason

    attr_accessor :record_term_reason

    # If recordTermReason is digit, this will be the digit that was pressed. Otherwise it will be null.
    attr_accessor :digit

    # Echo back of the privacyForLogging flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
    attr_accessor :privacy_for_logging

    # Echo back of the privacyForRecording flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
    attr_accessor :privacy_for_recording

    attr_accessor :barge_in_reason

    attr_accessor :barged_in_prompt_no

    # duration in ms bargedInPromptNo prompt was executing until barge-in occurred.
    attr_accessor :barged_in_prompt_ms

    attr_accessor :barged_in_prompt_loop_no

    # epoch time in ms
    attr_accessor :barge_in_time_ms

    # Transcribed text of the recording. Can be empty or null. null means there was a failure in transcribing the audio, refer to transcribeReason for detailed failure reason.
    attr_accessor :transcript

    attr_accessor :transcribe_reason

    # The duration of the audio being transcribed in milliseconds
    attr_accessor :transcription_duration_ms

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'request_type' => :'requestType',
        :'account_id' => :'accountId',
        :'call_id' => :'callId',
        :'from' => :'from',
        :'to' => :'to',
        :'recording_id' => :'recordingId',
        :'recording_url' => :'recordingUrl',
        :'recording_size' => :'recordingSize',
        :'recording_format' => :'recordingFormat',
        :'recording_duration_ms' => :'recordingDurationMs',
        :'term_reason' => :'termReason',
        :'record_term_reason' => :'recordTermReason',
        :'digit' => :'digit',
        :'privacy_for_logging' => :'privacyForLogging',
        :'privacy_for_recording' => :'privacyForRecording',
        :'barge_in_reason' => :'bargeInReason',
        :'barged_in_prompt_no' => :'bargedInPromptNo',
        :'barged_in_prompt_ms' => :'bargedInPromptMs',
        :'barged_in_prompt_loop_no' => :'bargedInPromptLoopNo',
        :'barge_in_time_ms' => :'bargeInTimeMs',
        :'transcript' => :'transcript',
        :'transcribe_reason' => :'transcribeReason',
        :'transcription_duration_ms' => :'transcriptionDurationMs'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'request_type' => :'String',
        :'account_id' => :'String',
        :'call_id' => :'String',
        :'from' => :'String',
        :'to' => :'String',
        :'recording_id' => :'String',
        :'recording_url' => :'String',
        :'recording_size' => :'Integer',
        :'recording_format' => :'String',
        :'recording_duration_ms' => :'Integer',
        :'term_reason' => :'TranscribeTermReason',
        :'record_term_reason' => :'RecordUtteranceTermReason',
        :'digit' => :'String',
        :'privacy_for_logging' => :'Boolean',
        :'privacy_for_recording' => :'Boolean',
        :'barge_in_reason' => :'BargeInReason',
        :'barged_in_prompt_no' => :'Integer',
        :'barged_in_prompt_ms' => :'Integer',
        :'barged_in_prompt_loop_no' => :'Integer',
        :'barge_in_time_ms' => :'Integer',
        :'transcript' => :'String',
        :'transcribe_reason' => :'TranscribeReason',
        :'transcription_duration_ms' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'recording_id',
        :'recording_url',
        :'recording_format',
        :'digit',
        :'transcript',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Webhook'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Freeclimb::TranscribeWebhook` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Freeclimb::TranscribeWebhook`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'request_type')
        self.request_type = attributes[:'request_type']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'call_id')
        self.call_id = attributes[:'call_id']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'recording_id')
        self.recording_id = attributes[:'recording_id']
      end

      if attributes.key?(:'recording_url')
        self.recording_url = attributes[:'recording_url']
      end

      if attributes.key?(:'recording_size')
        self.recording_size = attributes[:'recording_size']
      end

      if attributes.key?(:'recording_format')
        self.recording_format = attributes[:'recording_format']
      end

      if attributes.key?(:'recording_duration_ms')
        self.recording_duration_ms = attributes[:'recording_duration_ms']
      end

      if attributes.key?(:'term_reason')
        self.term_reason = attributes[:'term_reason']
      end

      if attributes.key?(:'record_term_reason')
        self.record_term_reason = attributes[:'record_term_reason']
      end

      if attributes.key?(:'digit')
        self.digit = attributes[:'digit']
      end

      if attributes.key?(:'privacy_for_logging')
        self.privacy_for_logging = attributes[:'privacy_for_logging']
      end

      if attributes.key?(:'privacy_for_recording')
        self.privacy_for_recording = attributes[:'privacy_for_recording']
      end

      if attributes.key?(:'barge_in_reason')
        self.barge_in_reason = attributes[:'barge_in_reason']
      end

      if attributes.key?(:'barged_in_prompt_no')
        self.barged_in_prompt_no = attributes[:'barged_in_prompt_no']
      end

      if attributes.key?(:'barged_in_prompt_ms')
        self.barged_in_prompt_ms = attributes[:'barged_in_prompt_ms']
      end

      if attributes.key?(:'barged_in_prompt_loop_no')
        self.barged_in_prompt_loop_no = attributes[:'barged_in_prompt_loop_no']
      end

      if attributes.key?(:'barge_in_time_ms')
        self.barge_in_time_ms = attributes[:'barge_in_time_ms']
      end

      if attributes.key?(:'transcript')
        self.transcript = attributes[:'transcript']
      end

      if attributes.key?(:'transcribe_reason')
        self.transcribe_reason = attributes[:'transcribe_reason']
      end

      if attributes.key?(:'transcription_duration_ms')
        self.transcription_duration_ms = attributes[:'transcription_duration_ms']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      if @request_type.nil?
        false
      else
        list_invalid_properties.length() == 0
      end
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          request_type == o.request_type &&
          account_id == o.account_id &&
          call_id == o.call_id &&
          from == o.from &&
          to == o.to &&
          recording_id == o.recording_id &&
          recording_url == o.recording_url &&
          recording_size == o.recording_size &&
          recording_format == o.recording_format &&
          recording_duration_ms == o.recording_duration_ms &&
          term_reason == o.term_reason &&
          record_term_reason == o.record_term_reason &&
          digit == o.digit &&
          privacy_for_logging == o.privacy_for_logging &&
          privacy_for_recording == o.privacy_for_recording &&
          barge_in_reason == o.barge_in_reason &&
          barged_in_prompt_no == o.barged_in_prompt_no &&
          barged_in_prompt_ms == o.barged_in_prompt_ms &&
          barged_in_prompt_loop_no == o.barged_in_prompt_loop_no &&
          barge_in_time_ms == o.barge_in_time_ms &&
          transcript == o.transcript &&
          transcribe_reason == o.transcribe_reason &&
          transcription_duration_ms == o.transcription_duration_ms && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [request_type, account_id, call_id, from, to, recording_id, recording_url, recording_size, recording_format, recording_duration_ms, term_reason, record_term_reason, digit, privacy_for_logging, privacy_for_recording, barge_in_reason, barged_in_prompt_no, barged_in_prompt_ms, barged_in_prompt_loop_no, barge_in_time_ms, transcript, transcribe_reason, transcription_duration_ms].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Freeclimb.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

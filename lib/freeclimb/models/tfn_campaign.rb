# #FreeClimb API
#
# FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
#
# The version of the OpenAPI document: 1.0.0
# Contact: support@freeclimb.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.9.0
#

require "date"
require "time"

module Freeclimb
  class TFNCampaign
    # ID of the account that created this participant.
    attr_accessor :account_id

    # TFNCampaignId
    attr_accessor :campaign_id

    attr_accessor :use_case

    attr_accessor :registration_status

    attr_accessor :date_created

    attr_accessor :date_updated

    attr_accessor :date_created_iso

    attr_accessor :date_updated_iso

    attr_accessor :revision

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        account_id: :accountId,
        campaign_id: :campaignId,
        use_case: :useCase,
        registration_status: :registrationStatus,
        date_created: :dateCreated,
        date_updated: :dateUpdated,
        date_created_iso: :dateCreatedISO,
        date_updated_iso: :dateUpdatedISO,
        revision: :revision
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        account_id: :String,
        campaign_id: :String,
        use_case: :String,
        registration_status: :SMSTollFreeCampaignRegistrationStatus,
        date_created: :String,
        date_updated: :String,
        date_created_iso: :String,
        date_updated_iso: :String,
        revision: :Integer
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :account_id
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `Freeclimb::TFNCampaign` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `Freeclimb::TFNCampaign`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:account_id)
        self.account_id = attributes[:account_id]
      end

      if attributes.key?(:campaign_id)
        self.campaign_id = attributes[:campaign_id]
      end

      if attributes.key?(:use_case)
        self.use_case = attributes[:use_case]
      end

      if attributes.key?(:registration_status)
        self.registration_status = attributes[:registration_status]
      end

      if attributes.key?(:date_created)
        self.date_created = attributes[:date_created]
      end

      if attributes.key?(:date_updated)
        self.date_updated = attributes[:date_updated]
      end

      if attributes.key?(:date_created_iso)
        self.date_created_iso = attributes[:date_created_iso]
      end

      if attributes.key?(:date_updated_iso)
        self.date_updated_iso = attributes[:date_updated_iso]
      end

      if attributes.key?(:revision)
        self.revision = attributes[:revision]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      if @campaign_id.nil?
        invalid_properties.push('invalid value for "campaign_id", campaign_id cannot be nil.')
      end

      pattern = /cmptfn_[a-fA-F0-9]{40}/
      if !@campaign_id&.match?(pattern)
        invalid_properties.push("invalid value for \"campaign_id\", must conform to the pattern #{pattern}.")
      end

      if @use_case.nil?
        invalid_properties.push('invalid value for "use_case", use_case cannot be nil.')
      end

      if @registration_status.nil?
        invalid_properties.push('invalid value for "registration_status", registration_status cannot be nil.')
      end

      if @date_created.nil?
        invalid_properties.push('invalid value for "date_created", date_created cannot be nil.')
      end

      if @date_updated.nil?
        invalid_properties.push('invalid value for "date_updated", date_updated cannot be nil.')
      end

      if @date_created_iso.nil?
        invalid_properties.push('invalid value for "date_created_iso", date_created_iso cannot be nil.')
      end

      if @date_updated_iso.nil?
        invalid_properties.push('invalid value for "date_updated_iso", date_updated_iso cannot be nil.')
      end

      if @revision.nil?
        invalid_properties.push('invalid value for "revision", revision cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if @account_id.nil?
        false
      else
        list_invalid_properties.length == 0
      end
    end

    # Custom attribute writer method with validation
    # @param [Object] campaign_id Value to be assigned
    def campaign_id=(campaign_id)
      if campaign_id.nil?
        fail ArgumentError, "campaign_id cannot be nil"
      end

      pattern = /cmptfn_[a-fA-F0-9]{40}/
      if !campaign_id&.match?(pattern)
        fail ArgumentError, "invalid value for \"campaign_id\", must conform to the pattern #{pattern}."
      end

      @campaign_id = campaign_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
        account_id == other.account_id &&
        campaign_id == other.campaign_id &&
        use_case == other.use_case &&
        registration_status == other.registration_status &&
        date_created == other.date_created &&
        date_updated == other.date_updated &&
        date_created_iso == other.date_created_iso &&
        date_updated_iso == other.date_updated_iso &&
        revision == other.revision
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_id, campaign_id, use_case, registration_status, date_created, date_updated, date_created_iso, date_updated_iso, revision].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send(:"#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send(:"#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send(:"#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Freeclimb.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

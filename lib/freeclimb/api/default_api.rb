=begin
#FreeClimb API

#FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

The version of the OpenAPI document: 1.0.0
Contact: support@freeclimb.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module Freeclimb
  class DefaultApi
    attr_accessor :api_client
    attr_accessor :account_id

    def initialize(api_client = ApiClient.default, account_id = nil)
      @api_client = api_client
      @account_id = account_id
      if @account_id.nil?
        @account_id = api_client.config.username
      end
    end
    # Buy a Phone Number
    # @param buy_incoming_number_request [BuyIncomingNumberRequest] Incoming Number transaction details
    # @param [Hash] opts the optional parameters
    # @return [IncomingNumberResult]
    def buy_a_phone_number(buy_incoming_number_request, opts = {})
      data, _status_code, _headers = buy_a_phone_number_with_http_info(buy_incoming_number_request, opts)
      data
    end

    # Buy a Phone Number
    # @param buy_incoming_number_request [BuyIncomingNumberRequest] Incoming Number transaction details
    # @param [Hash] opts the optional parameters
    # @return [Array<(IncomingNumberResult, Integer, Hash)>] IncomingNumberResult data, response status code and response headers
    def buy_a_phone_number_with_http_info(buy_incoming_number_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.buy_a_phone_number ...'
      end

      # verify the required parameter 'buy_incoming_number_request' is set
      if @api_client.config.client_side_validation && buy_incoming_number_request.nil?
        fail ArgumentError, "Missing the required parameter 'buy_incoming_number_request' when calling DefaultApi.buy_a_phone_number"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/IncomingPhoneNumbers'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(buy_incoming_number_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IncomingNumberResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.buy_a_phone_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#buy_a_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Conference
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConferenceRequest] :create_conference_request Conference to create
    # @return [ConferenceResult]
    def create_a_conference(opts = {})
      data, _status_code, _headers = create_a_conference_with_http_info(opts)
      data
    end

    # Create a Conference
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConferenceRequest] :create_conference_request Conference to create
    # @return [Array<(ConferenceResult, Integer, Hash)>] ConferenceResult data, response status code and response headers
    def create_a_conference_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_a_conference ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_conference_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_a_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_a_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Queue
    # @param [Hash] opts the optional parameters
    # @option opts [QueueRequest] :queue_request Queue details used to create a queue
    # @return [QueueResult]
    def create_a_queue(opts = {})
      data, _status_code, _headers = create_a_queue_with_http_info(opts)
      data
    end

    # Create a Queue
    # @param [Hash] opts the optional parameters
    # @option opts [QueueRequest] :queue_request Queue details used to create a queue
    # @return [Array<(QueueResult, Integer, Hash)>] QueueResult data, response status code and response headers
    def create_a_queue_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_a_queue ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'queue_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'QueueResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_a_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_a_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an application
    # @param [Hash] opts the optional parameters
    # @option opts [ApplicationRequest] :application_request Application Details
    # @return [ApplicationResult]
    def create_an_application(opts = {})
      data, _status_code, _headers = create_an_application_with_http_info(opts)
      data
    end

    # Create an application
    # @param [Hash] opts the optional parameters
    # @option opts [ApplicationRequest] :application_request Application Details
    # @return [Array<(ApplicationResult, Integer, Hash)>] ApplicationResult data, response status code and response headers
    def create_an_application_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_an_application ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Applications'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'application_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_an_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_an_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Recording
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_recording(recording_id, opts = {})
      delete_a_recording_with_http_info(recording_id, opts)
      nil
    end

    # Delete a Recording
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_recording_with_http_info(recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_a_recording ...'
      end

      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling DefaultApi.delete_a_recording"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Recordings/{recordingId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_a_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_a_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an application
    # @param application_id [String] String that uniquely identifies this application resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_an_application(application_id, opts = {})
      delete_an_application_with_http_info(application_id, opts)
      nil
    end

    # Delete an application
    # @param application_id [String] String that uniquely identifies this application resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_an_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_an_application ...'
      end

      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling DefaultApi.delete_an_application"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Applications/{applicationId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_an_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_an_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Incoming Number
    # @param phone_number_id [String] String that uniquely identifies this phone number resource.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_an_incoming_number(phone_number_id, opts = {})
      delete_an_incoming_number_with_http_info(phone_number_id, opts)
      nil
    end

    # Delete an Incoming Number
    # @param phone_number_id [String] String that uniquely identifies this phone number resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_an_incoming_number_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_an_incoming_number ...'
      end

      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling DefaultApi.delete_an_incoming_number"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_an_incoming_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_an_incoming_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dequeue a Member
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param call_id [String] ID if the Call that the Member belongs to
    # @param [Hash] opts the optional parameters
    # @return [QueueMember]
    def dequeue_a_member(queue_id, call_id, opts = {})
      data, _status_code, _headers = dequeue_a_member_with_http_info(queue_id, call_id, opts)
      data
    end

    # Dequeue a Member
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param call_id [String] ID if the Call that the Member belongs to
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMember, Integer, Hash)>] QueueMember data, response status code and response headers
    def dequeue_a_member_with_http_info(queue_id, call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.dequeue_a_member ...'
      end

      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling DefaultApi.dequeue_a_member"
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.dequeue_a_member"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues/{queueId}/Members/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueId' + '}', CGI.escape(queue_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.dequeue_a_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#dequeue_a_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dequeue Head Member
    # @param queue_id [String] String that uniquely identifies this queue resource.
    # @param [Hash] opts the optional parameters
    # @return [QueueMember]
    def dequeue_head_member(queue_id, opts = {})
      data, _status_code, _headers = dequeue_head_member_with_http_info(queue_id, opts)
      data
    end

    # Dequeue Head Member
    # @param queue_id [String] String that uniquely identifies this queue resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMember, Integer, Hash)>] QueueMember data, response status code and response headers
    def dequeue_head_member_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.dequeue_head_member ...'
      end

      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling DefaultApi.dequeue_head_member"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues/{queueId}/Members/Front'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueId' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.dequeue_head_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#dequeue_head_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a Recording File
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def download_a_recording_file(recording_id, opts = {})
      data, _status_code, _headers = download_a_recording_file_with_http_info(recording_id, opts)
      data
    end

    # Download a Recording File
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_a_recording_file_with_http_info(recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.download_a_recording_file ...'
      end

      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling DefaultApi.download_a_recording_file"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Recordings/{recordingId}/Download'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['audio/x-wav'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.download_a_recording_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#download_a_recording_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Filter Logs
    # @param filter_logs_request [FilterLogsRequest] Filter logs request paramters
    # @param [Hash] opts the optional parameters
    # @return [LogList]
    def filter_logs(filter_logs_request, opts = {})
      data, _status_code, _headers = filter_logs_with_http_info(filter_logs_request, opts)
      data
    end

    # Filter Logs
    # @param filter_logs_request [FilterLogsRequest] Filter logs request paramters
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogList, Integer, Hash)>] LogList data, response status code and response headers
    def filter_logs_with_http_info(filter_logs_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.filter_logs ...'
      end

      # verify the required parameter 'filter_logs_request' is set
      if @api_client.config.client_side_validation && filter_logs_request.nil?
        fail ArgumentError, "Missing the required parameter 'filter_logs_request' when calling DefaultApi.filter_logs"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Logs'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(filter_logs_request)

      # return_type
      return_type = opts[:debug_return_type] || 'LogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.filter_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#filter_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Call
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param [Hash] opts the optional parameters
    # @return [CallResult]
    def get_a_call(call_id, opts = {})
      data, _status_code, _headers = get_a_call_with_http_info(call_id, opts)
      data
    end

    # Get a Call
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallResult, Integer, Hash)>] CallResult data, response status code and response headers
    def get_a_call_with_http_info(call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_a_call ...'
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.get_a_call"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Calls/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CallResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_a_call",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_a_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Conference
    # @param conference_id [String] A string that uniquely identifies this conference resource.
    # @param [Hash] opts the optional parameters
    # @return [ConferenceResult]
    def get_a_conference(conference_id, opts = {})
      data, _status_code, _headers = get_a_conference_with_http_info(conference_id, opts)
      data
    end

    # Get a Conference
    # @param conference_id [String] A string that uniquely identifies this conference resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConferenceResult, Integer, Hash)>] ConferenceResult data, response status code and response headers
    def get_a_conference_with_http_info(conference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_a_conference ...'
      end

      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.get_a_conference"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences/{conferenceId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_a_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_a_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Member
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param call_id [String] ID of the Call that the Member belongs to
    # @param [Hash] opts the optional parameters
    # @return [QueueMember]
    def get_a_member(queue_id, call_id, opts = {})
      data, _status_code, _headers = get_a_member_with_http_info(queue_id, call_id, opts)
      data
    end

    # Get a Member
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param call_id [String] ID of the Call that the Member belongs to
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMember, Integer, Hash)>] QueueMember data, response status code and response headers
    def get_a_member_with_http_info(queue_id, call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_a_member ...'
      end

      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling DefaultApi.get_a_member"
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.get_a_member"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues/{queueId}/Members/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueId' + '}', CGI.escape(queue_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_a_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_a_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Participant
    # @param conference_id [String] ID of the conference this participant is in.
    # @param call_id [String] ID of the Call associated with this participant.
    # @param [Hash] opts the optional parameters
    # @return [ConferenceParticipantResult]
    def get_a_participant(conference_id, call_id, opts = {})
      data, _status_code, _headers = get_a_participant_with_http_info(conference_id, call_id, opts)
      data
    end

    # Get a Participant
    # @param conference_id [String] ID of the conference this participant is in.
    # @param call_id [String] ID of the Call associated with this participant.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConferenceParticipantResult, Integer, Hash)>] ConferenceParticipantResult data, response status code and response headers
    def get_a_participant_with_http_info(conference_id, call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_a_participant ...'
      end

      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.get_a_participant"
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.get_a_participant"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceParticipantResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_a_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_a_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Queue
    # @param queue_id [String] A string that uniquely identifies this queue resource.
    # @param [Hash] opts the optional parameters
    # @return [QueueResult]
    def get_a_queue(queue_id, opts = {})
      data, _status_code, _headers = get_a_queue_with_http_info(queue_id, opts)
      data
    end

    # Get a Queue
    # @param queue_id [String] A string that uniquely identifies this queue resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueResult, Integer, Hash)>] QueueResult data, response status code and response headers
    def get_a_queue_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_a_queue ...'
      end

      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling DefaultApi.get_a_queue"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues/{queueId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueId' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_a_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_a_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Recording
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [RecordingResult]
    def get_a_recording(recording_id, opts = {})
      data, _status_code, _headers = get_a_recording_with_http_info(recording_id, opts)
      data
    end

    # Get a Recording
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecordingResult, Integer, Hash)>] RecordingResult data, response status code and response headers
    def get_a_recording_with_http_info(recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_a_recording ...'
      end

      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling DefaultApi.get_a_recording"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Recordings/{recordingId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecordingResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_a_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_a_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Account
    # @param [Hash] opts the optional parameters
    # @return [AccountResult]
    def get_an_account(opts = {})
      data, _status_code, _headers = get_an_account_with_http_info(opts)
      data
    end

    # Get an Account
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResult, Integer, Hash)>] AccountResult data, response status code and response headers
    def get_an_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_an_account ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_an_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_an_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Application
    # @param application_id [String] A string that uniquely identifies this application resource.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationResult]
    def get_an_application(application_id, opts = {})
      data, _status_code, _headers = get_an_application_with_http_info(application_id, opts)
      data
    end

    # Get an Application
    # @param application_id [String] A string that uniquely identifies this application resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationResult, Integer, Hash)>] ApplicationResult data, response status code and response headers
    def get_an_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_an_application ...'
      end

      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling DefaultApi.get_an_application"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Applications/{applicationId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_an_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_an_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Incoming Number
    # @param phone_number_id [String] String that uniquely identifies this phone number resource.
    # @param [Hash] opts the optional parameters
    # @return [IncomingNumberResult]
    def get_an_incoming_number(phone_number_id, opts = {})
      data, _status_code, _headers = get_an_incoming_number_with_http_info(phone_number_id, opts)
      data
    end

    # Get an Incoming Number
    # @param phone_number_id [String] String that uniquely identifies this phone number resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IncomingNumberResult, Integer, Hash)>] IncomingNumberResult data, response status code and response headers
    def get_an_incoming_number_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_an_incoming_number ...'
      end

      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling DefaultApi.get_an_incoming_number"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IncomingNumberResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_an_incoming_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_an_incoming_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an SMS Message
    # @param message_id [String] String that uniquely identifies this Message resource.
    # @param [Hash] opts the optional parameters
    # @return [MessageResult]
    def get_an_sms_message(message_id, opts = {})
      data, _status_code, _headers = get_an_sms_message_with_http_info(message_id, opts)
      data
    end

    # Get an SMS Message
    # @param message_id [String] String that uniquely identifies this Message resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResult, Integer, Hash)>] MessageResult data, response status code and response headers
    def get_an_sms_message_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_an_sms_message ...'
      end

      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DefaultApi.get_an_sms_message"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Messages/{messageId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_an_sms_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_an_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Head Member
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param [Hash] opts the optional parameters
    # @return [QueueMember]
    def get_head_member(queue_id, opts = {})
      data, _status_code, _headers = get_head_member_with_http_info(queue_id, opts)
      data
    end

    # Get Head Member
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMember, Integer, Hash)>] QueueMember data, response status code and response headers
    def get_head_member_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_head_member ...'
      end

      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling DefaultApi.get_head_member"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues/{queueId}/Members/Front'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueId' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_head_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_head_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Active Queues
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_alias Return only the Queue resources with aliases that exactly match this name.
    # @return [QueueList]
    def list_active_queues(opts = {})
      data, _status_code, _headers = list_active_queues_with_http_info(opts)
      data
    end

    # List Active Queues
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_alias Return only the Queue resources with aliases that exactly match this name.
    # @return [Array<(QueueList, Integer, Hash)>] QueueList data, response status code and response headers
    def list_active_queues_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_active_queues ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'alias'] = opts[:'_alias'] if !opts[:'_alias'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_active_queues",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_active_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List All Account Logs
    # @param [Hash] opts the optional parameters
    # @return [LogList]
    def list_all_account_logs(opts = {})
      data, _status_code, _headers = list_all_account_logs_with_http_info(opts)
      data
    end

    # List All Account Logs
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogList, Integer, Hash)>] LogList data, response status code and response headers
    def list_all_account_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_all_account_logs ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Logs'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_all_account_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_all_account_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_alias Return only applications with aliases that exactly match this value.
    # @return [ApplicationList]
    def list_applications(opts = {})
      data, _status_code, _headers = list_applications_with_http_info(opts)
      data
    end

    # List applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_alias Return only applications with aliases that exactly match this value.
    # @return [Array<(ApplicationList, Integer, Hash)>] ApplicationList data, response status code and response headers
    def list_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_applications ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Applications'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'alias'] = opts[:'_alias'] if !opts[:'_alias'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List available numbers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format.
    # @option opts [String] :region State or province of this phone number.
    # @option opts [String] :country Country of this phone number.
    # @option opts [Boolean] :voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (default to true)
    # @option opts [Boolean] :sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (default to true)
    # @option opts [Boolean] :capabilities_voice 
    # @option opts [Boolean] :capabilities_sms 
    # @option opts [Boolean] :capabilities_toll_free 
    # @option opts [Boolean] :capabilities_ten_dlc 
    # @option opts [Boolean] :capabilities_short_code 
    # @return [AvailableNumberList]
    def list_available_numbers(opts = {})
      data, _status_code, _headers = list_available_numbers_with_http_info(opts)
      data
    end

    # List available numbers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format.
    # @option opts [String] :region State or province of this phone number.
    # @option opts [String] :country Country of this phone number.
    # @option opts [Boolean] :voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers.
    # @option opts [Boolean] :sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers.
    # @option opts [Boolean] :capabilities_voice 
    # @option opts [Boolean] :capabilities_sms 
    # @option opts [Boolean] :capabilities_toll_free 
    # @option opts [Boolean] :capabilities_ten_dlc 
    # @option opts [Boolean] :capabilities_short_code 
    # @return [Array<(AvailableNumberList, Integer, Hash)>] AvailableNumberList data, response status code and response headers
    def list_available_numbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_available_numbers ...'
      end
      # resource path
      local_var_path = '/AvailablePhoneNumbers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phoneNumber'] = opts[:'phone_number'] if !opts[:'phone_number'].nil?
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'voiceEnabled'] = opts[:'voice_enabled'] if !opts[:'voice_enabled'].nil?
      query_params[:'smsEnabled'] = opts[:'sms_enabled'] if !opts[:'sms_enabled'].nil?
      query_params[:'capabilities.voice'] = opts[:'capabilities_voice'] if !opts[:'capabilities_voice'].nil?
      query_params[:'capabilities.sms'] = opts[:'capabilities_sms'] if !opts[:'capabilities_sms'].nil?
      query_params[:'capabilities.tollFree'] = opts[:'capabilities_toll_free'] if !opts[:'capabilities_toll_free'].nil?
      query_params[:'capabilities.tenDLC'] = opts[:'capabilities_ten_dlc'] if !opts[:'capabilities_ten_dlc'].nil?
      query_params[:'capabilities.shortCode'] = opts[:'capabilities_short_code'] if !opts[:'capabilities_short_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AvailableNumberList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_available_numbers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_available_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Call Logs
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param [Hash] opts the optional parameters
    # @return [LogList]
    def list_call_logs(call_id, opts = {})
      data, _status_code, _headers = list_call_logs_with_http_info(call_id, opts)
      data
    end

    # List Call Logs
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogList, Integer, Hash)>] LogList data, response status code and response headers
    def list_call_logs_with_http_info(call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_call_logs ...'
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.list_call_logs"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Calls/{callId}/Logs'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_call_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_call_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Call Recordings
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_created Only show recordings created on the specified date, in the form *YYYY-MM-DD*.
    # @return [RecordingList]
    def list_call_recordings(call_id, opts = {})
      data, _status_code, _headers = list_call_recordings_with_http_info(call_id, opts)
      data
    end

    # List Call Recordings
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_created Only show recordings created on the specified date, in the form *YYYY-MM-DD*.
    # @return [Array<(RecordingList, Integer, Hash)>] RecordingList data, response status code and response headers
    def list_call_recordings_with_http_info(call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_call_recordings ...'
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.list_call_recordings"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Calls/{callId}/Recordings'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dateCreated'] = opts[:'date_created'] if !opts[:'date_created'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecordingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_call_recordings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_call_recordings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Calls
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (default to false)
    # @option opts [String] :to Only show Calls to this phone number.
    # @option opts [String] :from Only show Calls from this phone number.
    # @option opts [CallStatus] :call_status Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;.
    # @option opts [String] :start_time Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss.
    # @option opts [String] :end_time Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss.
    # @option opts [String] :parent_call_id Only show Calls spawned by the call with this ID.
    # @return [CallList]
    def list_calls(opts = {})
      data, _status_code, _headers = list_calls_with_http_info(opts)
      data
    end

    # List Calls
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query.
    # @option opts [String] :to Only show Calls to this phone number.
    # @option opts [String] :from Only show Calls from this phone number.
    # @option opts [CallStatus] :call_status Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;.
    # @option opts [String] :start_time Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss.
    # @option opts [String] :end_time Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss.
    # @option opts [String] :parent_call_id Only show Calls spawned by the call with this ID.
    # @return [Array<(CallList, Integer, Hash)>] CallList data, response status code and response headers
    def list_calls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_calls ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Calls'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'callStatus'] = opts[:'call_status'] if !opts[:'call_status'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'parentCallId'] = opts[:'parent_call_id'] if !opts[:'parent_call_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CallList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_calls",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Conferences
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;.
    # @option opts [String] :_alias List Conferences whose alias exactly matches this string.
    # @option opts [String] :date_created Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*.
    # @option opts [String] :date_updated Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*.
    # @return [ConferenceList]
    def list_conferences(opts = {})
      data, _status_code, _headers = list_conferences_with_http_info(opts)
      data
    end

    # List Conferences
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;.
    # @option opts [String] :_alias List Conferences whose alias exactly matches this string.
    # @option opts [String] :date_created Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*.
    # @option opts [String] :date_updated Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*.
    # @return [Array<(ConferenceList, Integer, Hash)>] ConferenceList data, response status code and response headers
    def list_conferences_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_conferences ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'alias'] = opts[:'_alias'] if !opts[:'_alias'].nil?
      query_params[:'dateCreated'] = opts[:'date_created'] if !opts[:'date_created'].nil?
      query_params[:'dateUpdated'] = opts[:'date_updated'] if !opts[:'date_updated'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_conferences",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_conferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Incoming Numbers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Only show incoming phone number resources that match this PCRE-compatible regular expression.
    # @option opts [String] :_alias Only show incoming phone numbers with aliases that exactly match this value.
    # @option opts [String] :region State or province of this phone number.
    # @option opts [String] :country Country of this phone number.
    # @option opts [String] :application_id ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.
    # @option opts [Boolean] :has_application Indication of whether the phone number has an application linked to it. (default to false)
    # @option opts [Boolean] :voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (default to true)
    # @option opts [Boolean] :sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (default to true)
    # @option opts [Boolean] :capabilities_voice 
    # @option opts [Boolean] :capabilities_sms 
    # @option opts [Boolean] :capabilities_toll_free 
    # @option opts [Boolean] :capabilities_ten_dlc 
    # @option opts [Boolean] :capabilities_short_code 
    # @option opts [Boolean] :offnet Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource.
    # @return [IncomingNumberList]
    def list_incoming_numbers(opts = {})
      data, _status_code, _headers = list_incoming_numbers_with_http_info(opts)
      data
    end

    # List Incoming Numbers
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Only show incoming phone number resources that match this PCRE-compatible regular expression.
    # @option opts [String] :_alias Only show incoming phone numbers with aliases that exactly match this value.
    # @option opts [String] :region State or province of this phone number.
    # @option opts [String] :country Country of this phone number.
    # @option opts [String] :application_id ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.
    # @option opts [Boolean] :has_application Indication of whether the phone number has an application linked to it.
    # @option opts [Boolean] :voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers.
    # @option opts [Boolean] :sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers.
    # @option opts [Boolean] :capabilities_voice 
    # @option opts [Boolean] :capabilities_sms 
    # @option opts [Boolean] :capabilities_toll_free 
    # @option opts [Boolean] :capabilities_ten_dlc 
    # @option opts [Boolean] :capabilities_short_code 
    # @option opts [Boolean] :offnet Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource.
    # @return [Array<(IncomingNumberList, Integer, Hash)>] IncomingNumberList data, response status code and response headers
    def list_incoming_numbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_incoming_numbers ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/IncomingPhoneNumbers'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phoneNumber'] = opts[:'phone_number'] if !opts[:'phone_number'].nil?
      query_params[:'alias'] = opts[:'_alias'] if !opts[:'_alias'].nil?
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'applicationId'] = opts[:'application_id'] if !opts[:'application_id'].nil?
      query_params[:'hasApplication'] = opts[:'has_application'] if !opts[:'has_application'].nil?
      query_params[:'voiceEnabled'] = opts[:'voice_enabled'] if !opts[:'voice_enabled'].nil?
      query_params[:'smsEnabled'] = opts[:'sms_enabled'] if !opts[:'sms_enabled'].nil?
      query_params[:'capabilities.voice'] = opts[:'capabilities_voice'] if !opts[:'capabilities_voice'].nil?
      query_params[:'capabilities.sms'] = opts[:'capabilities_sms'] if !opts[:'capabilities_sms'].nil?
      query_params[:'capabilities.tollFree'] = opts[:'capabilities_toll_free'] if !opts[:'capabilities_toll_free'].nil?
      query_params[:'capabilities.tenDLC'] = opts[:'capabilities_ten_dlc'] if !opts[:'capabilities_ten_dlc'].nil?
      query_params[:'capabilities.shortCode'] = opts[:'capabilities_short_code'] if !opts[:'capabilities_short_code'].nil?
      query_params[:'offnet'] = opts[:'offnet'] if !opts[:'offnet'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IncomingNumberList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_incoming_numbers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_incoming_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Members
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param [Hash] opts the optional parameters
    # @return [QueueMemberList]
    def list_members(queue_id, opts = {})
      data, _status_code, _headers = list_members_with_http_info(queue_id, opts)
      data
    end

    # List Members
    # @param queue_id [String] String that uniquely identifies the Queue that the Member belongs to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMemberList, Integer, Hash)>] QueueMemberList data, response status code and response headers
    def list_members_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_members ...'
      end

      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling DefaultApi.list_members"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues/{queueId}/Members'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueId' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueMemberList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Participants
    # @param conference_id [String] ID of the conference this participant is in.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :talk Only show Participants with the talk privilege.
    # @option opts [Boolean] :listen Only show Participants with the listen privilege.
    # @return [ConferenceParticipantList]
    def list_participants(conference_id, opts = {})
      data, _status_code, _headers = list_participants_with_http_info(conference_id, opts)
      data
    end

    # List Participants
    # @param conference_id [String] ID of the conference this participant is in.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :talk Only show Participants with the talk privilege.
    # @option opts [Boolean] :listen Only show Participants with the listen privilege.
    # @return [Array<(ConferenceParticipantList, Integer, Hash)>] ConferenceParticipantList data, response status code and response headers
    def list_participants_with_http_info(conference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_participants ...'
      end

      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.list_participants"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'talk'] = opts[:'talk'] if !opts[:'talk'].nil?
      query_params[:'listen'] = opts[:'listen'] if !opts[:'listen'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceParticipantList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_participants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Recordings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :call_id Show only Recordings made during the Call with this ID.
    # @option opts [String] :conference_id Show only Recordings made during the conference with this ID.
    # @option opts [String] :date_created Only show Recordings created on this date, formatted as *YYYY-MM-DD*.
    # @return [RecordingList]
    def list_recordings(opts = {})
      data, _status_code, _headers = list_recordings_with_http_info(opts)
      data
    end

    # List Recordings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :call_id Show only Recordings made during the Call with this ID.
    # @option opts [String] :conference_id Show only Recordings made during the conference with this ID.
    # @option opts [String] :date_created Only show Recordings created on this date, formatted as *YYYY-MM-DD*.
    # @return [Array<(RecordingList, Integer, Hash)>] RecordingList data, response status code and response headers
    def list_recordings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_recordings ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Recordings'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callId'] = opts[:'call_id'] if !opts[:'call_id'].nil?
      query_params[:'conferenceId'] = opts[:'conference_id'] if !opts[:'conference_id'].nil?
      query_params[:'dateCreated'] = opts[:'date_created'] if !opts[:'date_created'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecordingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_recordings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_recordings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SMS Messages
    # @param [Hash] opts the optional parameters
    # @option opts [String] :to Only show Messages to this phone number.
    # @option opts [String] :from Only show Messages from this phone number.
    # @option opts [String] :begin_time Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*.
    # @option opts [String] :end_time Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*..
    # @option opts [MessageDirection] :direction Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb.
    # @return [MessagesList]
    def list_sms_messages(opts = {})
      data, _status_code, _headers = list_sms_messages_with_http_info(opts)
      data
    end

    # List SMS Messages
    # @param [Hash] opts the optional parameters
    # @option opts [String] :to Only show Messages to this phone number.
    # @option opts [String] :from Only show Messages from this phone number.
    # @option opts [String] :begin_time Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*.
    # @option opts [String] :end_time Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*..
    # @option opts [MessageDirection] :direction Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb.
    # @return [Array<(MessagesList, Integer, Hash)>] MessagesList data, response status code and response headers
    def list_sms_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_sms_messages ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Messages'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'beginTime'] = opts[:'begin_time'] if !opts[:'begin_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessagesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_sms_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_sms_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make a Call
    # @param [Hash] opts the optional parameters
    # @option opts [MakeCallRequest] :make_call_request Call details for making a call
    # @return [CallResult]
    def make_a_call(opts = {})
      data, _status_code, _headers = make_a_call_with_http_info(opts)
      data
    end

    # Make a Call
    # @param [Hash] opts the optional parameters
    # @option opts [MakeCallRequest] :make_call_request Call details for making a call
    # @return [Array<(CallResult, Integer, Hash)>] CallResult data, response status code and response headers
    def make_a_call_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.make_a_call ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Calls'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'make_call_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CallResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.make_a_call",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#make_a_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a Participant
    # @param conference_id [String] ID of the conference this participant is in.
    # @param call_id [String] ID of the Call associated with this participant.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_a_participant(conference_id, call_id, opts = {})
      remove_a_participant_with_http_info(conference_id, call_id, opts)
      nil
    end

    # Remove a Participant
    # @param conference_id [String] ID of the conference this participant is in.
    # @param call_id [String] ID of the Call associated with this participant.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_a_participant_with_http_info(conference_id, call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.remove_a_participant ...'
      end

      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.remove_a_participant"
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.remove_a_participant"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.remove_a_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#remove_a_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an SMS Message
    # @param message_request [MessageRequest] Details to create a message
    # @param [Hash] opts the optional parameters
    # @return [MessageResult]
    def send_an_sms_message(message_request, opts = {})
      data, _status_code, _headers = send_an_sms_message_with_http_info(message_request, opts)
      data
    end

    # Send an SMS Message
    # @param message_request [MessageRequest] Details to create a message
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResult, Integer, Hash)>] MessageResult data, response status code and response headers
    def send_an_sms_message_with_http_info(message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_an_sms_message ...'
      end

      # verify the required parameter 'message_request' is set
      if @api_client.config.client_side_validation && message_request.nil?
        fail ArgumentError, "Missing the required parameter 'message_request' when calling DefaultApi.send_an_sms_message"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Messages'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(message_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.send_an_sms_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_an_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stream a Recording File
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def stream_a_recording_file(recording_id, opts = {})
      data, _status_code, _headers = stream_a_recording_file_with_http_info(recording_id, opts)
      data
    end

    # Stream a Recording File
    # @param recording_id [String] String that uniquely identifies this recording resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def stream_a_recording_file_with_http_info(recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stream_a_recording_file ...'
      end

      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling DefaultApi.stream_a_recording_file"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Recordings/{recordingId}/Stream'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'recordingId' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['audio/x-wav'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.stream_a_recording_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stream_a_recording_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Conference
    # @param conference_id [String] String that uniquely identifies this conference resource.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConferenceRequest] :update_conference_request Conference Details to update
    # @return [ConferenceResult]
    def update_a_conference(conference_id, opts = {})
      data, _status_code, _headers = update_a_conference_with_http_info(conference_id, opts)
      data
    end

    # Update a Conference
    # @param conference_id [String] String that uniquely identifies this conference resource.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConferenceRequest] :update_conference_request Conference Details to update
    # @return [Array<(ConferenceResult, Integer, Hash)>] ConferenceResult data, response status code and response headers
    def update_a_conference_with_http_info(conference_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_a_conference ...'
      end

      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.update_a_conference"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences/{conferenceId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_conference_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_a_conference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_a_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Live Call
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param update_call_request [UpdateCallRequest] Call details to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_a_live_call(call_id, update_call_request, opts = {})
      update_a_live_call_with_http_info(call_id, update_call_request, opts)
      nil
    end

    # Update a Live Call
    # @param call_id [String] String that uniquely identifies this call resource.
    # @param update_call_request [UpdateCallRequest] Call details to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_a_live_call_with_http_info(call_id, update_call_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_a_live_call ...'
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.update_a_live_call"
      end

      # verify the required parameter 'update_call_request' is set
      if @api_client.config.client_side_validation && update_call_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_call_request' when calling DefaultApi.update_a_live_call"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Calls/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_call_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_a_live_call",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_a_live_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Participant
    # @param conference_id [String] ID of the conference this participant is in.
    # @param call_id [String] ID of the Call associated with this participant.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConferenceParticipantRequest] :update_conference_participant_request Conference participant details to update
    # @return [ConferenceParticipantResult]
    def update_a_participant(conference_id, call_id, opts = {})
      data, _status_code, _headers = update_a_participant_with_http_info(conference_id, call_id, opts)
      data
    end

    # Update a Participant
    # @param conference_id [String] ID of the conference this participant is in.
    # @param call_id [String] ID of the Call associated with this participant.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConferenceParticipantRequest] :update_conference_participant_request Conference participant details to update
    # @return [Array<(ConferenceParticipantResult, Integer, Hash)>] ConferenceParticipantResult data, response status code and response headers
    def update_a_participant_with_http_info(conference_id, call_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_a_participant ...'
      end

      # verify the required parameter 'conference_id' is set
      if @api_client.config.client_side_validation && conference_id.nil?
        fail ArgumentError, "Missing the required parameter 'conference_id' when calling DefaultApi.update_a_participant"
      end

      # verify the required parameter 'call_id' is set
      if @api_client.config.client_side_validation && call_id.nil?
        fail ArgumentError, "Missing the required parameter 'call_id' when calling DefaultApi.update_a_participant"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conferenceId' + '}', CGI.escape(conference_id.to_s)).sub('{' + 'callId' + '}', CGI.escape(call_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_conference_participant_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ConferenceParticipantResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_a_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_a_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Queue
    # @param queue_id [String] A string that uniquely identifies this Queue resource.
    # @param [Hash] opts the optional parameters
    # @option opts [QueueRequest] :queue_request Queue Details to update
    # @return [QueueResult]
    def update_a_queue(queue_id, opts = {})
      data, _status_code, _headers = update_a_queue_with_http_info(queue_id, opts)
      data
    end

    # Update a Queue
    # @param queue_id [String] A string that uniquely identifies this Queue resource.
    # @param [Hash] opts the optional parameters
    # @option opts [QueueRequest] :queue_request Queue Details to update
    # @return [Array<(QueueResult, Integer, Hash)>] QueueResult data, response status code and response headers
    def update_a_queue_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_a_queue ...'
      end

      # verify the required parameter 'queue_id' is set
      if @api_client.config.client_side_validation && queue_id.nil?
        fail ArgumentError, "Missing the required parameter 'queue_id' when calling DefaultApi.update_a_queue"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Queues/{queueId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'queueId' + '}', CGI.escape(queue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'queue_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'QueueResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_a_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_a_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage an account
    # @param [Hash] opts the optional parameters
    # @option opts [AccountRequest] :account_request Account details to update
    # @return [nil]
    def update_an_account(opts = {})
      update_an_account_with_http_info(opts)
      nil
    end

    # Manage an account
    # @param [Hash] opts the optional parameters
    # @option opts [AccountRequest] :account_request Account details to update
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_an_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_an_account ...'
      end
      # resource path
      local_var_path = '/Accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'account_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_an_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_an_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an application
    # @param application_id [String] A string that uniquely identifies this application resource.
    # @param [Hash] opts the optional parameters
    # @option opts [ApplicationRequest] :application_request Application details to update.
    # @return [ApplicationResult]
    def update_an_application(application_id, opts = {})
      data, _status_code, _headers = update_an_application_with_http_info(application_id, opts)
      data
    end

    # Update an application
    # @param application_id [String] A string that uniquely identifies this application resource.
    # @param [Hash] opts the optional parameters
    # @option opts [ApplicationRequest] :application_request Application details to update.
    # @return [Array<(ApplicationResult, Integer, Hash)>] ApplicationResult data, response status code and response headers
    def update_an_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_an_application ...'
      end

      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling DefaultApi.update_an_application"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/Applications/{applicationId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'application_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_an_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_an_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Incoming Number
    # @param phone_number_id [String] String that uniquely identifies this phone number resource.
    # @param [Hash] opts the optional parameters
    # @option opts [IncomingNumberRequest] :incoming_number_request Incoming Number details to update
    # @return [IncomingNumberResult]
    def update_an_incoming_number(phone_number_id, opts = {})
      data, _status_code, _headers = update_an_incoming_number_with_http_info(phone_number_id, opts)
      data
    end

    # Update an Incoming Number
    # @param phone_number_id [String] String that uniquely identifies this phone number resource.
    # @param [Hash] opts the optional parameters
    # @option opts [IncomingNumberRequest] :incoming_number_request Incoming Number details to update
    # @return [Array<(IncomingNumberResult, Integer, Hash)>] IncomingNumberResult data, response status code and response headers
    def update_an_incoming_number_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_an_incoming_number ...'
      end

      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling DefaultApi.update_an_incoming_number"
      end
      # resource path
      local_var_path = '/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'incoming_number_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'IncomingNumberResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fc']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_an_incoming_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_an_incoming_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

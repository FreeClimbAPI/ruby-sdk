=begin
#FreeClimb API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'spec_helper'
require 'json'
require_relative 'web_mocks'
# Unit tests for Freeclimb::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
API_SERVER = 'https://www.freeclimb.com/apiserver'
ACCOUNT_ID = 'MOCK_ACCOUNT_ID'

describe 'DefaultApi' do

  before do
    Freeclimb.configure do |config|
      # Configure HTTP basic authorization: fc
      config.username = 'MOCK_USERNAME'
      config.password = 'MOCK_PASSWORD'
    end
    
    # run before each test
    @api_instance = Freeclimb::DefaultApi.new
    
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(Freeclimb::DefaultApi)
    end
  end

  # unit tests for buy_a_phone_number
  # Buy a Phone Number
  # @param account_id ID of the account that owns this phone number.
  # @param [Hash] opts the optional parameters
  # @option opts [BuyIncomingNumberRequest] :buy_incoming_number_request Incoming Number transaction details
  # @return [IncomingNumberResult]
  describe 'buy_a_phone_number test' do

    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/IncomingPhoneNumbers"
      @stub = stub_request(:post, uri_template).to_return(:body => ResponseMocks::INCOMING_PHONE_NUMBER, :status => 200, :headers => {})
      opts = {
        buy_incoming_number_request: Freeclimb::BuyIncomingNumberRequest.new # BuyIncomingNumberRequest | Incoming Number transaction details
      }
      #Buy a Phone Number
      @result = @api_instance.buy_a_phone_number(ACCOUNT_ID, opts)
    end
   

    it 'should respond with the phone number that was bought' do
      expect(@result).to be_instance_of Freeclimb::IncomingNumberResult
    end

    it 'should make a POST request to /Accounts/{accountId}/IncomingPhoneNumbers' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for create_a_conference
  # Create a Conference
  # @param account_id ID of the account that created this Conference.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateConferenceRequest] :create_conference_request Conference to create
  # @return [ConferenceResult]
  describe 'create_a_conference test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Conferences"
      @stub = stub_request(:post, uri_template).to_return(:body => ResponseMocks::CONFERENCE_RESULT, :status => 200, :headers => {})
      opts = {
        create_conference_request: Freeclimb::CreateConferenceRequest.new # CreateConferenceRequest | Conference to create
      }
      #Create a Conference
      @result = @api_instance.create_a_conference(ACCOUNT_ID, opts)
    
    end
   
    it 'should respond with the conference it created' do
      expect(@result).to be_instance_of Freeclimb::ConferenceResult
    end

    it 'should make a POST request to /Accounts/{accountId}/Conferences' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for create_a_queue
  # Create a Queue
  # @param account_id ID of the account that created this Queue.
  # @param [Hash] opts the optional parameters
  # @option opts [QueueRequest] :queue_request Queue details used to create a queue
  # @return [QueueResult]
  describe 'create_a_queue test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues"
      @stub = stub_request(:post, uri_template).to_return(:body => ResponseMocks::QUEUE_RESULT, :status => 200, :headers => {})
      opts = {
        queue_request: Freeclimb::QueueRequest.new # QueueRequest | Queue details used to create a queue
      }
      #Create a Queue
      @result = @api_instance.create_a_queue(ACCOUNT_ID, opts)
    end
   
    it 'should respond with the queue it created' do
      expect(@result).to be_instance_of Freeclimb::QueueResult
    end

    it 'should make a POST request to /Accounts/{accountId}/Queues' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for create_an_application
  # Create an application
  # @param account_id ID of the account that created this application.
  # @param [Hash] opts the optional parameters
  # @option opts [ApplicationRequest] :application_request Application Details
  # @return [ApplicationResult]
  describe 'create_an_application test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Applications"
      @stub = stub_request(:post, uri_template).to_return(:body => ResponseMocks::APPLICATION_RESULT, :status => 200, :headers => {})
      opts = {
        queue_request: Freeclimb::QueueRequest.new # QueueRequest | Queue details used to create a queue
      }
      #Create a Queue
      @result = @api_instance.create_an_application(ACCOUNT_ID, opts)
    end
   
    it 'should respond with the application it created' do
      expect(@result).to be_instance_of Freeclimb::ApplicationResult
    end

    it 'should make a POST request to /Accounts/{accountId}/Applications' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for delete_a_recording
  # Delete a Recording
  # @param account_id ID of the account that created this recording.
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_a_recording test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Recordings/{recordingId}"
      @stub = stub_request(:delete, uri_template).to_return(:status => 204, :headers => {})
      recording_id = 'MOCK_RECORDING_ID' # String | String that uniquely identifies this recording resource.

      @result = @api_instance.delete_a_recording(ACCOUNT_ID, recording_id)
    end
   
    it 'should respond with nothing' do
      expect(@result).to be_nil
    end

    it 'should make a DELETE request to /Accounts/{accountId}/Recordings/{recordingId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for delete_an_application
  # Delete an application
  # @param account_id ID of the account that created this application.
  # @param application_id String that uniquely identifies this application resource.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_an_application test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Applications/{applicationId}"
      @stub = stub_request(:delete, uri_template).to_return(:status => 204, :headers => {})
      application_id = 'MOCK_APPLICATION_ID' # String | String that uniquely identifies this application resource.

      @result = @api_instance.delete_an_application(ACCOUNT_ID, application_id)
    end
   
    it 'should respond with nothing' do
      expect(@result).to be_nil
    end

    it 'should make a DELETE request to /Accounts/{accountId}/Applications/{applicationId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for delete_an_incoming_number
  # Delete an Incoming Number
  # @param account_id ID of the account that owns this phone number.
  # @param phone_number_id String that uniquely identifies this phone number resource.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_an_incoming_number test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}"
      @stub = stub_request(:delete, uri_template).to_return(:status => 204, :headers => {})
      phone_number_id = 'phone_number_id_example' # String | String that uniquely identifies this phone number resource.

      #Delete an Incoming Number
      @result = @api_instance.delete_an_incoming_number(ACCOUNT_ID, phone_number_id)
    end
   
    it 'should respond with nothing' do
      expect(@result).to be_nil
    end

    it 'should make a DELETE request to /Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for dequeue_a_member
  # Dequeue a Member
  # @param account_id ID of the account that created the Queue
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param call_id ID if the Call that the Member belongs to
  # @param [Hash] opts the optional parameters
  # @option opts [DequeueMemberRequest] :dequeue_member_request Dequeue member request details
  # @return [QueueMember]
  describe 'dequeue_a_member test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues/{queueId}/Members/{callId}"
      @stub = stub_request(:post, uri_template).to_return(:body => ResponseMocks::QUEUE_MEMBER_RESULT, :status => 200, :headers => {})
      queue_id = 'MOCK_QUEUE_ID' # String | String that uniquely identifies the Queue that the Member belongs to.
      call_id = 'MOCK_CALL_ID' # String | ID if the Call that the Member belongs to
      opts = {
        dequeue_member_request: Freeclimb::DequeueMemberRequest.new # DequeueMemberRequest | Dequeue member request details
      }

      @result = @api_instance.dequeue_a_member(ACCOUNT_ID, queue_id, call_id, opts)
    end
   
    it 'should respond with a queue member' do
      expect(@result).to be_instance_of(Freeclimb::QueueMember)
    end

    it 'should make a POST request to /Accounts/{accountId}/Queues/{queueId}/Members/{callId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for dequeue_head_member
  # Dequeue Head Member
  # @param account_id ID of the account that created this queue.
  # @param queue_id String that uniquely identifies this queue resource.
  # @param [Hash] opts the optional parameters
  # @option opts [DequeueMemberRequest] :dequeue_member_request Dequeue head member request details
  # @return [QueueMember]
  describe 'dequeue_head_member test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues/{queueId}/Members/Front"
      @stub = stub_request(:post, uri_template).to_return(:body => ResponseMocks::QUEUE_MEMBER_RESULT, :status => 200, :headers => {})
      queue_id = 'MOCK_QUEUE_ID' # String | String that uniquely identifies the Queue that the Member belongs to.
      opts = {
        dequeue_member_request: Freeclimb::DequeueMemberRequest.new # DequeueMemberRequest | Dequeue member request details
      }

      @result = @api_instance.dequeue_head_member(ACCOUNT_ID, queue_id, opts)
    end
   
    it 'should respond with a queue member' do
      expect(@result).to be_instance_of(Freeclimb::QueueMember)
    end

    it 'should make a POST request to /Accounts/{accountId}/Queues/{queueId}/Members/{callId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for download_a_recording_file
  # Download a Recording File
  # @param account_id ID of the account that created this recording.
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'download_a_recording_file test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Recordings/{recordingId}/Download"
      @stub = stub_request(:get, uri_template).with(:headers => {'Accept' => 'audio/x-wav'}).to_return(:status => 200, :headers => {})
      recording_id = 'MOCK_RECORDING_ID' # String | String that uniquely identifies this recording resource.

      @result = @api_instance.download_a_recording_file(ACCOUNT_ID, recording_id)
    end

    it 'should make a POST request to /Accounts/{accountId}/Recordings/{recordingId}/Download' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for filter_logs
  # Filter Logs
  # @param account_id ID of the account that this log was generated under.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterLogsRequest] :filter_logs_request Filter logs request paramters
  # @return [LogList]
  describe 'filter_logs test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Logs"
      @stub = stub_request(:post, uri_template).to_return(:body => ResponseMocks::LOG_LIST_RESULT, :status => 200, :headers => {})
      opts = {
        filter_logs_request: Freeclimb::FilterLogsRequest.new # FilterLogsRequest | Filter logs request paramters
      }
      
      @result = @api_instance.filter_logs(ACCOUNT_ID, opts)
    end
   
    it 'should respond with a list of logs' do
      expect(@result).to be_instance_of(Freeclimb::LogList)
    end

    it 'should make a POST request to /Accounts/{accountId}/Logs' do
      expect(@stub).to have_been_requested
    end
  end

  
  # unit tests for get_a_call
  # Get a Call
  # @param account_id ID of the account that created this call.
  # @param call_id String that uniquely identifies this call resource.
  # @param [Hash] opts the optional parameters
  # @return [CallResult]
  describe 'get_a_call test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Calls/{callId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::CALL_RESULT, :status => 200, :headers => {})
      call_id = 'MOCK_CALL_ID' # String | String that uniquely identifies this call resource.

      @result = @api_instance.get_a_call(ACCOUNT_ID, call_id)
    end
   
    it 'should respond with a call result' do
      expect(@result).to be_instance_of(Freeclimb::CallResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Calls/{callId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_a_conference
  # Get a Conference
  # @param account_id ID of the account that created this conference.
  # @param conference_id A string that uniquely identifies this conference resource.
  # @param [Hash] opts the optional parameters
  # @return [ConferenceResult]
  describe 'get_a_conference test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Conferences/{conferenceId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::CONFERENCE_RESULT, :status => 200, :headers => {})
      conference_id = 'MOCK_CONFERENCE_ID' # String | A string that uniquely identifies this conference resource.

      @result = @api_instance.get_a_conference(ACCOUNT_ID, conference_id)
    end

    it 'should respond with a conference result' do
      expect(@result).to be_instance_of(Freeclimb::ConferenceResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Conferences/{conferenceId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_a_member
  # Get a Member
  # @param account_id ID of the account that created this Queue
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param call_id ID of the Call that the Member belongs to
  # @param [Hash] opts the optional parameters
  # @return [QueueMember]
  describe 'get_a_member test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues/{queueId}/Members/{callId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::QUEUE_MEMBER_RESULT, :status => 200, :headers => {})
      queue_id = 'MOCK_QUEUE_ID' # String | String that uniquely identifies the Queue that the Member belongs to.
      call_id = 'MOCK_CALL_ID' # String | ID of the Call that the Member belongs to
      @result = @api_instance.get_a_member(ACCOUNT_ID, queue_id, call_id)
    end

    it 'should respond with a queue member result' do
      expect(@result).to be_instance_of(Freeclimb::QueueMember)
    end

    it 'should make a GET request to /Accounts/{accountId}/Queues/{queueId}/Members/{callId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_a_participant
  # Get a Participant
  # @param account_id ID of the account that created this participant.
  # @param conference_id ID of the conference this participant is in.
  # @param call_id ID of the Call associated with this participant.
  # @param [Hash] opts the optional parameters
  # @return [ConferenceParticipantResult]
  describe 'get_a_participant test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Conferences/{ConferenceId}/Participants/{callId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::CONFERENCE_PARTICIPANT_RESULT, :status => 200, :headers => {})
      conference_id = 'MOCK_CONFERENCE_ID' # String | ID of the conference this participant is in.
      call_id = 'MOCK_CALL_ID' # String | ID of the Call associated with this participant.
      
      @result = @api_instance.get_a_participant(ACCOUNT_ID, conference_id, call_id)
    end

    it 'should respond with a Conference participant result' do
      expect(@result).to be_instance_of(Freeclimb::ConferenceParticipantResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Conferences/{ConferenceId}/Participants/{callId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_a_queue
  # Get a Queue
  # @param account_id ID of the account that created this queue.
  # @param queue_id A string that uniquely identifies this queue resource.
  # @param [Hash] opts the optional parameters
  # @return [QueueResult]
  describe 'get_a_queue test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues/{queueId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::QUEUE_RESULT, :status => 200, :headers => {})
      queue_id = 'MOCK_QUEUE_ID' # String | A string that uniquely identifies this queue resource.

      @result = @api_instance.get_a_queue(ACCOUNT_ID, queue_id)
    end

    it 'should respond with a queue result' do
      expect(@result).to be_instance_of(Freeclimb::QueueResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Queues/{queueId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_a_recording
  # Get a Recording
  # @param account_id ID of the account that created this recording.
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [RecordingResult]
  describe 'get_a_recording test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Recordings/{recordingId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::QUEUE_RESULT, :status => 200, :headers => {})
      recording_id = 'MOCK_RECORDING_ID' # String | String that uniquely identifies this recording resource.

      @result = @api_instance.get_a_recording(ACCOUNT_ID, recording_id)
    end

    it 'should respond with a Recording result' do
      expect(@result).to be_instance_of(Freeclimb::RecordingResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Recordings/{recordingId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_an_account
  # Get an Account
  # @param account_id String that uniquely identifies this account resource.
  # @param [Hash] opts the optional parameters
  # @return [AccountResult]
  describe 'get_an_account test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::ACCOUNT_RESULT, :status => 200, :headers => {})

      @result = @api_instance.get_an_account(ACCOUNT_ID)
    end

    it 'should respond with an Account result' do
      expect(@result).to be_instance_of(Freeclimb::AccountResult)
    end

    it 'should make a GET request to /Accounts/{accountId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_an_application
  # Get an Application
  # @param account_id ID of the account that created this application.
  # @param application_id A string that uniquely identifies this application resource.
  # @param [Hash] opts the optional parameters
  # @return [ApplicationResult]
  describe 'get_an_application test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Applications/{applicationId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::APPLICATION_RESULT, :status => 200, :headers => {})

      application_id = 'MOCK_APPLICATION_ID' # String | A string that uniquely identifies this application resource.
      @result = @api_instance.get_an_application(ACCOUNT_ID, application_id)
    end

    it 'should respond with an Application result' do
      expect(@result).to be_instance_of(Freeclimb::ApplicationResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Applications/{applicationId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_an_incoming_number
  # Get an Incoming Number
  # @param account_id ID of the account that owns this phone number.
  # @param phone_number_id String that uniquely identifies this phone number resource.
  # @param [Hash] opts the optional parameters
  # @return [IncomingNumberResult]
  describe 'get_an_incoming_number test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::INCOMING_PHONE_NUMBER, :status => 200, :headers => {})

      phone_number_id = 'MOCK_PHONE_NUMBER_ID' # String | String that uniquely identifies this phone number resource.
      @result = @api_instance.get_an_incoming_number(ACCOUNT_ID, phone_number_id)
    end

    it 'should respond with an Application result' do
      expect(@result).to be_instance_of(Freeclimb::IncomingNumberResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Applications/{applicationId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_an_sms_message
  # Get an SMS Message
  # @param account_id String that uniquely identifies this account resource.
  # @param message_id String that uniquely identifies this Message resource.
  # @param [Hash] opts the optional parameters
  # @return [MessageResult]
  describe 'get_an_sms_message test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Messages/{messageId}"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::MESSAGE_RESULT, :status => 200, :headers => {})

      message_id = 'MOCK_MESSAGE_ID' # String | String that uniquely identifies this Message resource.

      @result = @api_instance.get_an_sms_message(ACCOUNT_ID, message_id)
    end

    it 'should respond with a Message result' do
      expect(@result).to be_instance_of(Freeclimb::MessageResult)
    end

    it 'should make a GET request to /Accounts/{accountId}/Messages/{messageId}' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for get_head_member
  # Get Head Member
  # @param account_id ID of the account that created this Queue
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param [Hash] opts the optional parameters
  # @return [QueueMember]
  describe 'get_head_member test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues/{queueId}/Members/Front"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::QUEUE_MEMBER_RESULT, :status => 200, :headers => {})

      queue_id = 'MOCK_QUEUE_ID' # String | String that uniquely identifies this Message resource.

      @result = @api_instance.get_head_member(ACCOUNT_ID, queue_id)
    end

    it 'should respond with a Queue Member result' do
      expect(@result).to be_instance_of(Freeclimb::QueueMember)
    end

    it 'should make a GET request to /Accounts/{accountId}/Queues/{queueId}/Members/Front' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_active_queues
  # List Active Queues
  # @param account_id ID of the account that created this Queue.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_alias Return only the Queue resources with aliases that exactly match this name.
  # @return [QueueList]
  describe 'list_active_queues test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::QUEUE_LIST_RESULT, :status => 200, :headers => {})

      @result = @api_instance.list_active_queues(ACCOUNT_ID)
    end

    it 'should respond with a Queue List result' do
      expect(@result).to be_instance_of(Freeclimb::QueueList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Queues' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_all_account_logs
  # List All Account Logs
  # @param account_id ID of the account that these Logs were generated under.
  # @param [Hash] opts the optional parameters
  # @return [LogList]
  describe 'list_all_account_logs test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Logs"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::LOG_LIST_RESULT, :status => 200, :headers => {})

      @result = @api_instance.list_all_account_logs(ACCOUNT_ID)
    end

    it 'should respond with a Queue Member result' do
      expect(@result).to be_instance_of(Freeclimb::LogList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Logs' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_an_application
  # List applications
  # @param account_id ID of the account that created this application.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_alias Return only applications with aliases that exactly match this value.
  # @return [ApplicationList]
  describe 'list_an_application test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Applications"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::APPLICATION_LIST_RESULT, :status => 200, :headers => {})

      @result = @api_instance.list_an_application(ACCOUNT_ID)
    end

    it 'should respond with a Application List result' do
      expect(@result).to be_instance_of(Freeclimb::ApplicationList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Applications' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_available_numbers
  # List available numbers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_alias Filter on numbers based on the formatted string of the phone number.
  # @option opts [String] :phone_number PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format.
  # @return [AvailableNumberList]
  describe 'list_available_numbers test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/AvailablePhoneNumbers?alias=MOCK_ALIAS&phoneNumber=MOCK_PHONE_NUMBER"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::AVAILABLE_NUMBER_LIST, :status => 200, :headers => {})

      opts = {
        _alias: 'MOCK_ALIAS', # String | Filter on numbers based on the formatted string of the phone number.
        phone_number: 'MOCK_PHONE_NUMBER' # String | PCRE-compatible regular expression to filter against `phoneNumber` field, which is in E.164 format.
      }
      
      @result = @api_instance.list_available_numbers(opts)
    end

    it 'should respond with a Available Number List result' do
      expect(@result).to be_instance_of(Freeclimb::AvailableNumberList)
    end

    it 'should make a GET request to /AvailablePhoneNumbers' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_call_logs
  # List Call Logs
  # @param account_id ID of the account that created this call.
  # @param call_id String that uniquely identifies this call resource.
  # @param [Hash] opts the optional parameters
  # @return [LogList]
  describe 'list_call_logs test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Calls/{callId}/Logs"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::LOG_LIST_RESULT, :status => 200, :headers => {})

      call_id = 'MOCK_CALL_ID' # String | String that uniquely identifies this call resource.
      @result = @api_instance.list_call_logs(ACCOUNT_ID, call_id)
    end

    it 'should respond with a Logs List result' do
      expect(@result).to be_instance_of(Freeclimb::LogList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Calls/{callId}/Logs' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_call_recordings
  # List Call Recordings
  # @param account_id ID of the account that created this call.
  # @param call_id String that uniquely identifies this call resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date_created Only show recordings created on the specified date, in the form *YYYY-MM-DD*.
  # @return [RecordingList]
  describe 'list_call_recordings test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Calls/{callId}/Recordings"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::RECORDING_LIST_RESULT, :status => 200, :headers => {})

      call_id = 'MOCK_CALL_ID' # String | String that uniquely identifies this call resource.
      @result = @api_instance.list_call_recordings(ACCOUNT_ID, call_id)
    end

    it 'should respond with a Recording List result' do
      expect(@result).to be_instance_of(Freeclimb::RecordingList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Calls/{callId}/Recordings' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_calls
  # List Calls
  # @param account_id ID of the account that created this call.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :to Only show Calls to this phone number.
  # @option opts [String] :from Only show Calls from this phone number.
  # @option opts [String] :status Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;.
  # @option opts [String] :start_time Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss.
  # @option opts [String] :end_time Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss.
  # @option opts [String] :parent_call_id Only show Calls spawned by the call with this ID.
  # @return [CallList]
  describe 'list_calls test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Calls"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::CALL_LIST_RESULT, :status => 200, :headers => {})

      @result = @api_instance.list_calls(ACCOUNT_ID)
    end

    it 'should respond with a Call List result' do
      expect(@result).to be_instance_of(Freeclimb::CallList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Calls' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_conferences
  # List Conferences
  # @param account_id ID of the account that created this conference.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;.
  # @option opts [String] :_alias List Conferences whose alias exactly matches this string.
  # @option opts [String] :date_created Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*.
  # @option opts [String] :date_updated Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*.
  # @return [ConferenceList]
  describe 'list_conferences test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Conferences"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::CONFERNECE_LIST_RESULT, :status => 200, :headers => {})

      @result = @api_instance.list_conferences(ACCOUNT_ID)
    end

    it 'should respond with a Conferences List result' do
      expect(@result).to be_instance_of(Freeclimb::ConferenceList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Conferences' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_incoming_numbers
  # List Incoming Numbers
  # @param account_id ID of the account that owns this phone number.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_number Only show incoming phone number resources that match this PCRE-compatible regular expression.
  # @option opts [String] :_alias Only show incoming phone numbers with aliases that exactly match this value.
  # @return [IncomingNumberList]
  describe 'list_incoming_numbers test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/IncomingPhoneNumbers"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::INCOMING_PHONE_NUMBER_LIST_RESULT, :status => 200, :headers => {})

      @result = @api_instance.list_incoming_numbers(ACCOUNT_ID)
    end

    it 'should respond with a Incoming Phone Number List result' do
      expect(@result).to be_instance_of(Freeclimb::IncomingNumberList)
    end

    it 'should make a GET request to /Accounts/{accountId}/IncomingPhoneNumbers' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_members
  # List Members
  # @param account_id ID of the account that created this Queue
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param [Hash] opts the optional parameters
  # @return [QueueMemberList]
  describe 'list_members test' do
    before do
      uri_template = Addressable::Template.new "#{API_SERVER}/Accounts/{accountId}/Queues/{queueId}/Members"
      @stub = stub_request(:get, uri_template).to_return(:body => ResponseMocks::QUEUE_MEMBER_RESULT, :status => 200, :headers => {})

      queue_id = 'MOCK_QUEUE_ID'
      @result = @api_instance.list_members(ACCOUNT_ID, queue_id)
    end

    it 'should respond with a Queue Member List result' do
      expect(@result).to be_instance_of(Freeclimb::QueueMemberList)
    end

    it 'should make a GET request to /Accounts/{accountId}/Queues/{queueId}/Members' do
      expect(@stub).to have_been_requested
    end
  end

  # unit tests for list_participants
  # List Participants
  # @param account_id ID of the account that created this participant.
  # @param conference_id ID of the conference this participant is in.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :talk Only show Participants with the talk privilege.
  # @option opts [Boolean] :listen Only show Participants with the listen privilege.
  # @return [ConferenceParticipantList]
  describe 'list_participants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_recordings
  # List Recordings
  # @param account_id ID of the account that created this recording.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :call_id Show only Recordings made during the Call with this ID.
  # @option opts [String] :conference_id Show only Recordings made during the conference with this ID.
  # @option opts [String] :date_created Only show Recordings created on this date, formatted as *YYYY-MM-DD*.
  # @return [RecordingList]
  describe 'list_recordings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_sms_messages
  # List SMS Messages
  # @param account_id2 ID of the account that sent this message.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :to Only show Messages to this phone number.
  # @option opts [String] :from Only show Messages from this phone number.
  # @option opts [String] :begin_time Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*.
  # @option opts [String] :end_time Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*..
  # @option opts [String] :direction Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb.
  # @option opts [String] :account_id String that uniquely identifies this account resource.
  # @return [MessagesList]
  describe 'list_sms_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for make_a_call
  # Make a Call
  # @param account_id ID of the account that created this call.
  # @param [Hash] opts the optional parameters
  # @option opts [MakeCallRequest] :make_call_request Call details for making a call
  # @return [CallResult]
  describe 'make_a_call test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_a_participant
  # Remove a Participant
  # @param account_id ID of the account that created this participant.
  # @param conference_id ID of the conference this participant is in.
  # @param call_id ID of the Call associated with this participant.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_a_participant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_an_sms_message
  # Send an SMS Message
  # @param account_id ID of the account that sent this message.
  # @param [Hash] opts the optional parameters
  # @option opts [MessageRequest] :message_request Details to create a message
  # @return [MessageResult]
  describe 'send_an_sms_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stream_a_recording_file
  # Stream a Recording File
  # @param account_id ID of the account that created this recording.
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'stream_a_recording_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_conference
  # Update a Conference
  # @param account_id ID of the account that created this conference.
  # @param conference_id String that uniquely identifies this conference resource.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateConferenceRequest] :update_conference_request Conference Details to update
  # @return [ConferenceResult]
  describe 'update_a_conference test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_live_call
  # Update a Live Call
  # @param account_id ID of the account that created this call.
  # @param call_id String that uniquely identifies this call resource.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateCallRequest] :update_call_request Call details to update
  # @return [nil]
  describe 'update_a_live_call test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_participant
  # Update a Participant
  # @param account_id ID of the account that created this participant.
  # @param conference_id ID of the conference this participant is in.
  # @param call_id ID of the Call associated with this participant.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateConferenceParticipantRequest] :update_conference_participant_request Conference participant details to update
  # @return [ConferenceParticipantResult]
  describe 'update_a_participant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_queue
  # Update a Queue
  # @param account_id ID of the account that created this queue.
  # @param queue_id A string that uniquely identifies this Queue resource.
  # @param [Hash] opts the optional parameters
  # @option opts [QueueRequest] :queue_request Queue Details to update
  # @return [QueueResult]
  describe 'update_a_queue test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_an_account
  # Manage an account
  # @param account_id String that uniquely identifies this account resource.
  # @param [Hash] opts the optional parameters
  # @option opts [AccountRequest] :account_request Account details to update
  # @return [nil]
  describe 'update_an_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_an_application
  # Update an application
  # @param account_id ID of the account that created this application.
  # @param application_id A string that uniquely identifies this application resource.
  # @param [Hash] opts the optional parameters
  # @option opts [ApplicationRequest] :application_request Application details to update.
  # @return [ApplicationResult]
  describe 'update_an_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_an_incoming_number
  # Update an Incoming Number
  # @param account_id ID of the account that owns this phone number.
  # @param phone_number_id String that uniquely identifies this phone number resource.
  # @param [Hash] opts the optional parameters
  # @option opts [IncomingNumberRequest] :incoming_number_request Incoming Number details to update
  # @return [IncomingNumberResult]
  describe 'update_an_incoming_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

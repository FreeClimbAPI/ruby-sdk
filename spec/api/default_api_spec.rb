=begin
#FreeClimb API

#FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

The version of the OpenAPI document: 1.0.0
Contact: support@freeclimb.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'
require 'facets/string/snakecase'

# Unit tests for Freeclimb::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    Freeclimb.configure do |config|
      # Configure HTTP basic authorization: fc
      config.scheme = 'http'
      config.host = 'http://127.0.0.1:4010/'
      config.base_path = '/'
      config.server_index = nil
      config.username = 'ACCOUNT_ID'
      config.password = 'API_KEY'
    end

    @api_client = Freeclimb::ApiClient.new

    Freeclimb::File = Tempfile

    @api_instance = Freeclimb::DefaultApi.new(@api_client)
    
    @buy_incoming_number_request_buy_a_phone_number_test_value = Freeclimb::BuyIncomingNumberRequest.new({phone_number: 'phone_number_example'})
    
    @create_conference_request_create_a_conference_test_value = Freeclimb::CreateConferenceRequest.new({_alias: 'alias_example', play_beep:Freeclimb::PlayBeep::ALWAYS, record: true, wait_url: 'wait_url_example', status_callback_url: 'status_callback_url_example'})

    @queue_request_create_a_queue_test_value = Freeclimb::QueueRequest.new

    @application_request_create_an_application_test_value = Freeclimb::ApplicationRequest.new
        
    @recording_id_delete_a_recording_test_value = 'recordingId_example'

    @application_id_delete_an_application_test_value = 'applicationId_example'

    @phone_number_id_delete_an_incoming_number_test_value = 'phoneNumberId_example'

    @queue_id_dequeue_a_member_test_value = 'queueId_example'

    @call_id_dequeue_a_member_test_value = 'callId_example'

    @queue_id_dequeue_head_member_test_value = 'queueId_example'

    @recording_id_download_a_recording_file_test_value = 'recordingId_example'

    @filter_logs_request_filter_logs_test_value = Freeclimb::FilterLogsRequest.new({pql: 'pql_example'})

    @call_id_get_a_call_test_value = 'callId_example'

    @conference_id_get_a_conference_test_value = 'conferenceId_example'

    @queue_id_get_a_member_test_value = 'queueId_example'

    @call_id_get_a_member_test_value = 'callId_example'

    @conference_id_get_a_participant_test_value = 'conferenceId_example'

    @call_id_get_a_participant_test_value = 'callId_example'

    @queue_id_get_a_queue_test_value = 'queueId_example'

    @recording_id_get_a_recording_test_value = 'recordingId_example'

    @application_id_get_an_application_test_value = 'applicationId_example'

    @phone_number_id_get_an_incoming_number_test_value = 'phoneNumberId_example'

    @message_id_get_an_sms_message_test_value = 'messageId_example'

    @queue_id_get_head_member_test_value = 'queueId_example'

    @alias_list_active_queues_test_value = 'alias_example'

    @alias_list_applications_test_value = 'alias_example'

    @phone_number_list_available_numbers_test_value = 'phoneNumberId_example'

    @region_list_available_numbers_test_value = 'region_example'

    @country_list_available_numbers_test_value = 'country_example'

    @voice_enabled_list_available_numbers_test_value = true

    @sms_enabled_list_available_numbers_test_value = true

    @capabilities_voice_list_available_numbers_test_value = true

    @capabilities_sms_list_available_numbers_test_value = true

    @capabilities_toll_free_list_available_numbers_test_value = true

    @capabilities_ten_dlc_list_available_numbers_test_value = true

    @capabilities_short_code_list_available_numbers_test_value = true

    @call_id_list_call_logs_test_value = 'callId_example'

    @call_id_list_call_recordings_test_value = 'callId_example'

    @date_created_list_call_recordings_test_value = 'dateCreated_example'

    @active_list_calls_test_value = false 

    @to_list_calls_test_value = 'to_example'

    @_from_list_calls_test_value = 'from_example'

    @status_list_calls_test_value = Freeclimb::CallStatus::QUEUED

    @start_time_list_calls_test_value = 'startTime_example'

    @end_time_list_calls_test_value = 'endTime_example'

    @parent_call_id_list_calls_test_value = 'parentCallId_example'

    @application_id_list_calls_test_value = ['AP0123456789ABCDEFabcedf000000000000000001', 'AP0123456789ABCDEFabcedf000000000000000002', 'AP0123456789ABCDEFabcedf000000000000000002']

    @status_list_conferences_test_value = 'status_example'

    @alias_list_conferences_test_value = 'alias_example'

    @date_created_list_conferences_test_value = 'dateCreated_example'

    @date_updated_list_conferences_test_value = 'dateUpdated_example'
        
    @phone_number_list_incoming_numbers_test_value = 'phoneNumberId_example'

    @alias_list_incoming_numbers_test_value = 'alias_example'

    @region_list_incoming_numbers_test_value = 'region_example'

    @country_list_incoming_numbers_test_value = 'country_example'

    @application_id_list_incoming_numbers_test_value = 'applicationId_example'

    @has_application_list_incoming_numbers_test_value = false

    @voice_enabled_list_incoming_numbers_test_value = true

    @sms_enabled_list_incoming_numbers_test_value = true

    @capabilities_voice_list_incoming_numbers_test_value = true

    @capabilities_sms_list_incoming_numbers_test_value = true

    @capabilities_toll_free_list_incoming_numbers_test_value = true

    @capabilities_ten_dlc_list_incoming_numbers_test_value = true

    @capabilities_short_code_list_incoming_numbers_test_value = true

    @queue_id_list_members_test_value = 'queueId_example'

    @conference_id_list_participants_test_value = 'conferenceId_example'

    @talk_list_participants_test_value = true

    @listen_list_participants_test_value = true

    @to_list_sms_messages_test_value='to_example'

    @_from_list_sms_messages_test_value = 'from_example'

    @begin_time_list_sms_messages_test_value = 'beginTime_example'

    @end_time_list_sms_messages_test_value = 'endTime_example'

    @direction_list_sms_messages_test_value = Freeclimb::MessageDirection::INBOUND

    @conference_id_remove_a_participant_test_value = 'conferenceId_example'

    @call_id_remove_a_participant_test_value = 'callId_example'

    @recording_id_stream_a_recording_file_test_value = 'recordingId_example'

    @conference_id_update_a_conference_test_value = 'conferenceId_example'

    @call_id_update_a_live_call_test_value = 'callId_example'

    @conference_id_update_a_participant_test_value = 'conferenceId_example'

    @call_id_update_a_participant_test_value = 'callId_example'

    @queue_id_update_a_queue_test_value = 'queueId_example'

    @application_id_update_an_application_test_value = 'applicationId_example'

    @phone_number_id_update_an_incoming_number_test_value = 'phoneNumberId_example'

    @offnet_list_incoming_numbers_test_value = true

    @call_id_list_recordings_test_value = 'callId_example'

    @conference_id_list_recordings_test_value = 'conferenceId_example'

    @date_created_list_recordings_test_value = 'dateCreated_example'

    @brand_id_get_ten_dlc_sms_campaigns_test_value = 'BX56XX4'

    @brand_id_get_ten_dlc_sms_partner_campaigns_test_value = 'BX56XX4'

    @brand_id_get_ten_dlc_sms_brand_test_value = 'BX56XX4'

    @campaign_id_get_ten_dlc_sms_campaign_test_value = 'CX56XX4'

    @campaign_id_get_ten_dlc_sms_partner_campaign_test_value = 'CX56XX4'

    @has_campaign_list_incoming_numbers_test_value = true

    @campaign_id_list_sms_messages_test_value = 'CX56XX4'

    @brand_id_list_sms_messages_test_value = 'BX56XX4'

    @is10_dlc_list_sms_messages_test_value = true

    @queue_request_update_a_queue_test_value = Freeclimb::QueueRequest.new

    @application_request_update_an_application_test_value = Freeclimb::ApplicationRequest.new

    @make_call_request_make_a_call_test_value = Freeclimb::MakeCallRequest.new({from: 'from_example', to: 'to_example'})

    @message_request_send_an_sms_message_test_value = Freeclimb::MessageRequest.new({from: 'from_example', to: 'to_example', text: 'text_example'})

    @update_conference_request_update_a_conference_test_value = Freeclimb::UpdateConferenceRequest.new({_alias: 'alias_example', play_beep:Freeclimb::PlayBeep::ALWAYS , status: Freeclimb::UpdateConferenceRequestStatus::EMPTY})

    @update_call_request_update_a_live_call_test_value = Freeclimb::UpdateCallRequest.new({status: Freeclimb::UpdateCallRequestStatus::CANCELED})
    
    @update_conference_participant_request_update_a_participant_test_value = Freeclimb::UpdateConferenceParticipantRequest.new 

    @account_request_update_an_account_test_value = Freeclimb::AccountRequest.new

    @incoming_number_request_update_an_incoming_number_test_value = Freeclimb::IncomingNumberRequest.new
  
    @campaign_id_get_toll_free_sms_campaign_test_value = 'CX56XX4'

    @conference_id_list_conference_recordings_test_value = 'conferenceId_example'

    @create_web_rtc_token_make_a_webrtc_jwt_test_value=Freeclimb::CreateWebRTCToken.new({to: 'to_example', from: 'from_example', uses: 2})

  end

  after do
    WebMock.reset!
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(Freeclimb::DefaultApi)
    end
  end

  # unit tests for buy_a_phone_number
  # Buy a Phone Number
  # @param buy_incoming_number_request Incoming Number transaction details
  # @param [Hash] opts the optional parameters
  # @return [IncomingNumberResult]
  describe 'buy_a_phone_number test' do
    it 'should work' do
      
      buy_incoming_number_request = @buy_incoming_number_request_buy_a_phone_number_test_value
      
      result = @api_instance.buy_a_phone_number(
        buy_incoming_number_request,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::IncomingNumberResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_a_conference
  # Create a Conference
  # @param [Hash] opts the optional parameters
  # @option opts [CreateConferenceRequest] :create_conference_request Conference to create
  # @return [ConferenceResult]
  describe 'create_a_conference test' do
    it 'should work' do
      
      create_conference_request = @create_conference_request_create_a_conference_test_value
      
      result = @api_instance.create_a_conference(
        
        {
          :create_conference_request => create_conference_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ConferenceResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_a_queue
  # Create a Queue
  # @param [Hash] opts the optional parameters
  # @option opts [QueueRequest] :queue_request Queue details used to create a queue
  # @return [QueueResult]
  describe 'create_a_queue test' do
    it 'should work' do
      
      queue_request = @queue_request_create_a_queue_test_value
      
      result = @api_instance.create_a_queue(
        
        {
          :queue_request => queue_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_an_application
  # Create an application
  # @param [Hash] opts the optional parameters
  # @option opts [ApplicationRequest] :application_request Application Details
  # @return [ApplicationResult]
  describe 'create_an_application test' do
    it 'should work' do
      
      application_request = @application_request_create_an_application_test_value
      
      result = @api_instance.create_an_application(
        
        {
          :application_request => application_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ApplicationResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_a_recording
  # Delete a Recording
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_a_recording test' do
    it 'should work' do
      
      recording_id = @recording_id_delete_a_recording_test_value
      
      result = @api_instance.delete_a_recording(
        recording_id,
        {
          
        }
      )
      false
      
      
      expect(result).to be_nil
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_an_application
  # Delete an application
  # @param application_id String that uniquely identifies this application resource.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_an_application test' do
    it 'should work' do
      
      application_id = @application_id_delete_an_application_test_value
      
      result = @api_instance.delete_an_application(
        application_id,
        {
          
        }
      )
      false
      
      
      expect(result).to be_nil
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_an_incoming_number
  # Delete an Incoming Number
  # @param phone_number_id String that uniquely identifies this phone number resource.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_an_incoming_number test' do
    it 'should work' do
      
      phone_number_id = @phone_number_id_delete_an_incoming_number_test_value
      
      result = @api_instance.delete_an_incoming_number(
        phone_number_id,
        {
          
        }
      )
      false
      
      
      expect(result).to be_nil
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dequeue_a_member
  # Dequeue a Member
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param call_id ID if the Call that the Member belongs to
  # @param [Hash] opts the optional parameters
  # @return [QueueMember]
  describe 'dequeue_a_member test' do
    it 'should work' do
      
      queue_id = @queue_id_dequeue_a_member_test_value
      call_id = @call_id_dequeue_a_member_test_value
      
      result = @api_instance.dequeue_a_member(
        queue_id,call_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueMember
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dequeue_head_member
  # Dequeue Head Member
  # @param queue_id String that uniquely identifies this queue resource.
  # @param [Hash] opts the optional parameters
  # @return [QueueMember]
  describe 'dequeue_head_member test' do
    it 'should work' do
      
      queue_id = @queue_id_dequeue_head_member_test_value
      
      result = @api_instance.dequeue_head_member(
        queue_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueMember
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_a_recording_file
  # Download a Recording File
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'download_a_recording_file test' do
    it 'should work' do
      
      recording_id = @recording_id_download_a_recording_file_test_value
      
      result = @api_instance.download_a_recording_file(
        recording_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::File
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_logs
  # Filter Logs
  # @param filter_logs_request Filter logs request paramters
  # @param [Hash] opts the optional parameters
  # @return [LogList]
  describe 'filter_logs test' do
    it 'should work' do
      
      filter_logs_request = @filter_logs_request_filter_logs_test_value
      
      result = @api_instance.filter_logs(
        filter_logs_request,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::LogList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_call
  # Get a Call
  # @param call_id String that uniquely identifies this call resource.
  # @param [Hash] opts the optional parameters
  # @return [CallResult]
  describe 'get_a_call test' do
    it 'should work' do
      
      call_id = @call_id_get_a_call_test_value
      
      result = @api_instance.get_a_call(
        call_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::CallResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_conference
  # Get a Conference
  # @param conference_id A string that uniquely identifies this conference resource.
  # @param [Hash] opts the optional parameters
  # @return [ConferenceResult]
  describe 'get_a_conference test' do
    it 'should work' do
      
      conference_id = @conference_id_get_a_conference_test_value
      
      result = @api_instance.get_a_conference(
        conference_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ConferenceResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_member
  # Get a Member
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param call_id ID of the Call that the Member belongs to
  # @param [Hash] opts the optional parameters
  # @return [QueueMember]
  describe 'get_a_member test' do
    it 'should work' do
      
      queue_id = @queue_id_get_a_member_test_value
      call_id = @call_id_get_a_member_test_value
      
      result = @api_instance.get_a_member(
        queue_id,call_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueMember
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_participant
  # Get a Participant
  # @param conference_id ID of the conference this participant is in.
  # @param call_id ID of the Call associated with this participant.
  # @param [Hash] opts the optional parameters
  # @return [ConferenceParticipantResult]
  describe 'get_a_participant test' do
    it 'should work' do
      
      conference_id = @conference_id_get_a_participant_test_value
      call_id = @call_id_get_a_participant_test_value
      
      result = @api_instance.get_a_participant(
        conference_id,call_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ConferenceParticipantResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_queue
  # Get a Queue
  # @param queue_id A string that uniquely identifies this queue resource.
  # @param [Hash] opts the optional parameters
  # @return [QueueResult]
  describe 'get_a_queue test' do
    it 'should work' do
      
      queue_id = @queue_id_get_a_queue_test_value
      
      result = @api_instance.get_a_queue(
        queue_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_recording
  # Get a Recording
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [RecordingResult]
  describe 'get_a_recording test' do
    it 'should work' do
      
      recording_id = @recording_id_get_a_recording_test_value
      
      result = @api_instance.get_a_recording(
        recording_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::RecordingResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_an_account
  # Get an Account
  # @param [Hash] opts the optional parameters
  # @return [AccountResult]
  describe 'get_an_account test' do
    it 'should work' do
      
      
      result = @api_instance.get_an_account(
        
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::AccountResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_an_application
  # Get an Application
  # @param application_id A string that uniquely identifies this application resource.
  # @param [Hash] opts the optional parameters
  # @return [ApplicationResult]
  describe 'get_an_application test' do
    it 'should work' do
      
      application_id = @application_id_get_an_application_test_value
      
      result = @api_instance.get_an_application(
        application_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ApplicationResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_an_incoming_number
  # Get an Incoming Number
  # @param phone_number_id String that uniquely identifies this phone number resource.
  # @param [Hash] opts the optional parameters
  # @return [IncomingNumberResult]
  describe 'get_an_incoming_number test' do
    it 'should work' do
      
      phone_number_id = @phone_number_id_get_an_incoming_number_test_value
      
      result = @api_instance.get_an_incoming_number(
        phone_number_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::IncomingNumberResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_an_sms_message
  # Get an SMS Message
  # @param message_id String that uniquely identifies this Message resource.
  # @param [Hash] opts the optional parameters
  # @return [MessageResult]
  describe 'get_an_sms_message test' do
    it 'should work' do
      
      message_id = @message_id_get_an_sms_message_test_value
      
      result = @api_instance.get_an_sms_message(
        message_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::MessageResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_head_member
  # Get Head Member
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param [Hash] opts the optional parameters
  # @return [QueueMember]
  describe 'get_head_member test' do
    it 'should work' do
      
      queue_id = @queue_id_get_head_member_test_value
      
      result = @api_instance.get_head_member(
        queue_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueMember
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ten_dlc_sms_brand
  # Get a 10DLC SMS Brand
  # @param brand_id String that uniquely identifies this brand resource.
  # @param [Hash] opts the optional parameters
  # @return [SMSTenDLCBrand]
  describe 'get_ten_dlc_sms_brand test' do
    it 'should work' do
      
      brand_id = @brand_id_get_ten_dlc_sms_brand_test_value
      
      result = @api_instance.get_ten_dlc_sms_brand(
        brand_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTenDLCBrand
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ten_dlc_sms_brands
  # Get list of SMS 10DLC Brands
  # @param [Hash] opts the optional parameters
  # @return [SMSTenDLCBrandsListResult]
  describe 'get_ten_dlc_sms_brands test' do
    it 'should work' do
      
      
      result = @api_instance.get_ten_dlc_sms_brands(
        
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTenDLCBrandsListResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ten_dlc_sms_campaign
  # Get a 10DLC SMS Campaign
  # @param campaign_id String that uniquely identifies this campaign resource.
  # @param [Hash] opts the optional parameters
  # @return [SMSTenDLCCampaign]
  describe 'get_ten_dlc_sms_campaign test' do
    it 'should work' do
      
      campaign_id = @campaign_id_get_ten_dlc_sms_campaign_test_value
      
      result = @api_instance.get_ten_dlc_sms_campaign(
        campaign_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTenDLCCampaign
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ten_dlc_sms_campaigns
  # Get list of SMS 10DLC Campaigns
  # @param [Hash] opts the optional parameters
  # @option opts [String] :brand_id The unique identifier for a brand
  # @return [SMSTenDLCCampaignsListResult]
  describe 'get_ten_dlc_sms_campaigns test' do
    it 'should work' do
      
      brand_id = @brand_id_get_ten_dlc_sms_campaigns_test_value
      
      result = @api_instance.get_ten_dlc_sms_campaigns(
        
        {
          :brand_id => brand_id,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTenDLCCampaignsListResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ten_dlc_sms_partner_campaign
  # Get a 10DLC SMS Partner Campaign
  # @param campaign_id String that uniquely identifies this campaign resource.
  # @param [Hash] opts the optional parameters
  # @return [SMSTenDLCPartnerCampaign]
  describe 'get_ten_dlc_sms_partner_campaign test' do
    it 'should work' do
      
      campaign_id = @campaign_id_get_ten_dlc_sms_partner_campaign_test_value
      
      result = @api_instance.get_ten_dlc_sms_partner_campaign(
        campaign_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTenDLCPartnerCampaign
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ten_dlc_sms_partner_campaigns
  # Get list of SMS 10DLC Partner Campaigns
  # @param [Hash] opts the optional parameters
  # @option opts [String] :brand_id The unique identifier for a brand
  # @return [SMSTenDLCPartnerCampaignsListResult]
  describe 'get_ten_dlc_sms_partner_campaigns test' do
    it 'should work' do
      
      brand_id = @brand_id_get_ten_dlc_sms_partner_campaigns_test_value
      
      result = @api_instance.get_ten_dlc_sms_partner_campaigns(
        
        {
          :brand_id => brand_id,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTenDLCPartnerCampaignsListResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_toll_free_sms_campaign
  # Get a TollFree SMS Campaign
  # @param campaign_id String that uniquely identifies this TollFree Campaign resource.
  # @param [Hash] opts the optional parameters
  # @return [SMSTollFreeCampaign]
  describe 'get_toll_free_sms_campaign test' do
    it 'should work' do
      
      campaign_id = @campaign_id_get_toll_free_sms_campaign_test_value
      
      result = @api_instance.get_toll_free_sms_campaign(
        campaign_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTollFreeCampaign
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_toll_free_sms_campaigns
  # Get list of TollFree Campaigns
  # @param [Hash] opts the optional parameters
  # @return [SMSTollFreeCampaignsListResult]
  describe 'get_toll_free_sms_campaigns test' do
    it 'should work' do
      
      
      result = @api_instance.get_toll_free_sms_campaigns(
        
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::SMSTollFreeCampaignsListResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_active_queues
  # List Active Queues
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_alias Return only the Queue resources with aliases that exactly match this name.
  # @return [QueueList]
  describe 'list_active_queues test' do
    it 'should work' do
      
      _alias = @_alias_list_active_queues_test_value
      
      result = @api_instance.list_active_queues(
        
        {
          :_alias => _alias,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_all_account_logs
  # List All Account Logs
  # @param [Hash] opts the optional parameters
  # @return [LogList]
  describe 'list_all_account_logs test' do
    it 'should work' do
      
      
      result = @api_instance.list_all_account_logs(
        
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::LogList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_applications
  # List applications
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_alias Return only applications with aliases that exactly match this value.
  # @return [ApplicationList]
  describe 'list_applications test' do
    it 'should work' do
      
      _alias = @_alias_list_applications_test_value
      
      result = @api_instance.list_applications(
        
        {
          :_alias => _alias,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ApplicationList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_available_numbers
  # List available numbers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_number PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format.
  # @option opts [String] :region State or province of this phone number.
  # @option opts [String] :country Country of this phone number.
  # @option opts [Boolean] :voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers.
  # @option opts [Boolean] :sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers.
  # @option opts [Boolean] :capabilities_voice 
  # @option opts [Boolean] :capabilities_sms 
  # @option opts [Boolean] :capabilities_toll_free 
  # @option opts [Boolean] :capabilities_ten_dlc 
  # @option opts [Boolean] :capabilities_short_code 
  # @return [AvailableNumberList]
  describe 'list_available_numbers test' do
    it 'should work' do
      
      phone_number = @phone_number_list_available_numbers_test_value
      region = @region_list_available_numbers_test_value
      country = @country_list_available_numbers_test_value
      voice_enabled = @voice_enabled_list_available_numbers_test_value
      sms_enabled = @sms_enabled_list_available_numbers_test_value
      capabilities_voice = @capabilities_voice_list_available_numbers_test_value
      capabilities_sms = @capabilities_sms_list_available_numbers_test_value
      capabilities_toll_free = @capabilities_toll_free_list_available_numbers_test_value
      capabilities_ten_dlc = @capabilities_ten_dlc_list_available_numbers_test_value
      capabilities_short_code = @capabilities_short_code_list_available_numbers_test_value
      
      result = @api_instance.list_available_numbers(
        
        {
          :phone_number => phone_number,:region => region,:country => country,:voice_enabled => voice_enabled,:sms_enabled => sms_enabled,:capabilities_voice => capabilities_voice,:capabilities_sms => capabilities_sms,:capabilities_toll_free => capabilities_toll_free,:capabilities_ten_dlc => capabilities_ten_dlc,:capabilities_short_code => capabilities_short_code,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::AvailableNumberList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_call_logs
  # List Call Logs
  # @param call_id String that uniquely identifies this call resource.
  # @param [Hash] opts the optional parameters
  # @return [LogList]
  describe 'list_call_logs test' do
    it 'should work' do
      
      call_id = @call_id_list_call_logs_test_value
      
      result = @api_instance.list_call_logs(
        call_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::LogList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_call_recordings
  # List Call Recordings
  # @param call_id String that uniquely identifies this call resource.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date_created Only show recordings created on the specified date, in the form *YYYY-MM-DD*.
  # @return [RecordingList]
  describe 'list_call_recordings test' do
    it 'should work' do
      
      call_id = @call_id_list_call_recordings_test_value
      date_created = @date_created_list_call_recordings_test_value
      
      result = @api_instance.list_call_recordings(
        call_id,
        {
          :date_created => date_created,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::RecordingList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_calls
  # List Calls
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :active If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query.
  # @option opts [String] :to Only show Calls to this phone number.
  # @option opts [String] :from Only show Calls from this phone number.
  # @option opts [CallStatus] :status Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;.
  # @option opts [String] :start_time Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss.
  # @option opts [String] :end_time Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss.
  # @option opts [String] :parent_call_id Only show Calls spawned by the call with this ID.
  # @option opts [Array<String>] :application_id Only show calls belonging to the given applicationId. This parameter can be repeated to return calls from multiple Applications.
  # @return [CallList]
  describe 'list_calls test' do
    it 'should work' do
      
      active = @active_list_calls_test_value
      to = @to_list_calls_test_value
      from = @from_list_calls_test_value
      status = @status_list_calls_test_value
      start_time = @start_time_list_calls_test_value
      end_time = @end_time_list_calls_test_value
      parent_call_id = @parent_call_id_list_calls_test_value
      application_id = @application_id_list_calls_test_value
      
      result = @api_instance.list_calls(
        
        {
          :active => active,:to => to,:from => from,:status => status,:start_time => start_time,:end_time => end_time,:parent_call_id => parent_call_id,:application_id => application_id,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::CallList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_conference_recordings
  # List Conference Recordings
  # @param conference_id Show only Recordings made during the conference with this ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :call_id Show only Recordings made during the Call with this ID.
  # @option opts [String] :date_created Only show Recordings created on this date, formatted as *YYYY-MM-DD*.
  # @return [RecordingList]
  describe 'list_conference_recordings test' do
    it 'should work' do
      
      conference_id = @conference_id_list_conference_recordings_test_value
      call_id = @call_id_list_conference_recordings_test_value
      date_created = @date_created_list_conference_recordings_test_value
      
      result = @api_instance.list_conference_recordings(
        conference_id,
        {
          :call_id => call_id,:date_created => date_created,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::RecordingList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_conferences
  # List Conferences
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;.
  # @option opts [String] :_alias List Conferences whose alias exactly matches this string.
  # @option opts [String] :date_created Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*.
  # @option opts [String] :date_updated Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*.
  # @return [ConferenceList]
  describe 'list_conferences test' do
    it 'should work' do
      
      status = @status_list_conferences_test_value
      _alias = @_alias_list_conferences_test_value
      date_created = @date_created_list_conferences_test_value
      date_updated = @date_updated_list_conferences_test_value
      
      result = @api_instance.list_conferences(
        
        {
          :status => status,:_alias => _alias,:date_created => date_created,:date_updated => date_updated,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ConferenceList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_incoming_numbers
  # List Incoming Numbers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_number Only show incoming phone number resources that match this PCRE-compatible regular expression.
  # @option opts [String] :_alias Only show incoming phone numbers with aliases that exactly match this value.
  # @option opts [String] :region State or province of this phone number.
  # @option opts [String] :country Country of this phone number.
  # @option opts [String] :application_id ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.
  # @option opts [Boolean] :has_application Indication of whether the phone number has an application linked to it.
  # @option opts [Boolean] :voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers.
  # @option opts [Boolean] :sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers.
  # @option opts [Boolean] :has_campaign Indication of whether the phone number has a campaign associated with it
  # @option opts [Boolean] :capabilities_voice 
  # @option opts [Boolean] :capabilities_sms 
  # @option opts [Boolean] :capabilities_toll_free 
  # @option opts [Boolean] :capabilities_ten_dlc 
  # @option opts [Boolean] :capabilities_short_code 
  # @option opts [String] :tfn_campaign_id Only show incoming phone number resources that have been assigned to the provided TFNCampaign ID.
  # @option opts [Boolean] :offnet Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource.
  # @return [IncomingNumberList]
  describe 'list_incoming_numbers test' do
    it 'should work' do
      
      phone_number = @phone_number_list_incoming_numbers_test_value
      _alias = @_alias_list_incoming_numbers_test_value
      region = @region_list_incoming_numbers_test_value
      country = @country_list_incoming_numbers_test_value
      application_id = @application_id_list_incoming_numbers_test_value
      has_application = @has_application_list_incoming_numbers_test_value
      voice_enabled = @voice_enabled_list_incoming_numbers_test_value
      sms_enabled = @sms_enabled_list_incoming_numbers_test_value
      has_campaign = @has_campaign_list_incoming_numbers_test_value
      capabilities_voice = @capabilities_voice_list_incoming_numbers_test_value
      capabilities_sms = @capabilities_sms_list_incoming_numbers_test_value
      capabilities_toll_free = @capabilities_toll_free_list_incoming_numbers_test_value
      capabilities_ten_dlc = @capabilities_ten_dlc_list_incoming_numbers_test_value
      capabilities_short_code = @capabilities_short_code_list_incoming_numbers_test_value
      tfn_campaign_id = @tfn_campaign_id_list_incoming_numbers_test_value
      offnet = @offnet_list_incoming_numbers_test_value
      
      result = @api_instance.list_incoming_numbers(
        
        {
          :phone_number => phone_number,:_alias => _alias,:region => region,:country => country,:application_id => application_id,:has_application => has_application,:voice_enabled => voice_enabled,:sms_enabled => sms_enabled,:has_campaign => has_campaign,:capabilities_voice => capabilities_voice,:capabilities_sms => capabilities_sms,:capabilities_toll_free => capabilities_toll_free,:capabilities_ten_dlc => capabilities_ten_dlc,:capabilities_short_code => capabilities_short_code,:tfn_campaign_id => tfn_campaign_id,:offnet => offnet,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::IncomingNumberList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_members
  # List Members
  # @param queue_id String that uniquely identifies the Queue that the Member belongs to.
  # @param [Hash] opts the optional parameters
  # @return [QueueMemberList]
  describe 'list_members test' do
    it 'should work' do
      
      queue_id = @queue_id_list_members_test_value
      
      result = @api_instance.list_members(
        queue_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueMemberList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_participants
  # List Participants
  # @param conference_id ID of the conference this participant is in.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :talk Only show Participants with the talk privilege.
  # @option opts [Boolean] :listen Only show Participants with the listen privilege.
  # @return [ConferenceParticipantList]
  describe 'list_participants test' do
    it 'should work' do
      
      conference_id = @conference_id_list_participants_test_value
      talk = @talk_list_participants_test_value
      listen = @listen_list_participants_test_value
      
      result = @api_instance.list_participants(
        conference_id,
        {
          :talk => talk,:listen => listen,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ConferenceParticipantList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_recordings
  # List Recordings
  # @param [Hash] opts the optional parameters
  # @option opts [String] :call_id Show only Recordings made during the Call with this ID.
  # @option opts [String] :conference_id Show only Recordings made during the conference with this ID.
  # @option opts [String] :date_created Only show Recordings created on this date, formatted as *YYYY-MM-DD*.
  # @return [RecordingList]
  describe 'list_recordings test' do
    it 'should work' do
      
      call_id = @call_id_list_recordings_test_value
      conference_id = @conference_id_list_recordings_test_value
      date_created = @date_created_list_recordings_test_value
      
      result = @api_instance.list_recordings(
        
        {
          :call_id => call_id,:conference_id => conference_id,:date_created => date_created,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::RecordingList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_sms_messages
  # List SMS Messages
  # @param [Hash] opts the optional parameters
  # @option opts [String] :to Only show Messages to this phone number.
  # @option opts [String] :from Only show Messages from this phone number.
  # @option opts [String] :begin_time Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*.
  # @option opts [String] :end_time Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*..
  # @option opts [MessageDirection] :direction Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb.
  # @option opts [String] :campaign_id Only show messages associated with this campaign ID.
  # @option opts [String] :brand_id Only show messages associated with this brand ID
  # @option opts [Boolean] :is10_dlc Only show messages that were sent as part of a 10DLC campaign.
  # @return [MessagesList]
  describe 'list_sms_messages test' do
    it 'should work' do
      
      to = @to_list_sms_messages_test_value
      from = @from_list_sms_messages_test_value
      begin_time = @begin_time_list_sms_messages_test_value
      end_time = @end_time_list_sms_messages_test_value
      direction = @direction_list_sms_messages_test_value
      campaign_id = @campaign_id_list_sms_messages_test_value
      brand_id = @brand_id_list_sms_messages_test_value
      is10_dlc = @is10_dlc_list_sms_messages_test_value
      
      result = @api_instance.list_sms_messages(
        
        {
          :to => to,:from => from,:begin_time => begin_time,:end_time => end_time,:direction => direction,:campaign_id => campaign_id,:brand_id => brand_id,:is10_dlc => is10_dlc,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::MessagesList
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for make_a_call
  # Make a Call
  # @param [Hash] opts the optional parameters
  # @option opts [MakeCallRequest] :make_call_request Call details for making a call
  # @return [CallResult]
  describe 'make_a_call test' do
    it 'should work' do
      
      make_call_request = @make_call_request_make_a_call_test_value
      
      result = @api_instance.make_a_call(
        
        {
          :make_call_request => make_call_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::CallResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for make_a_webrtc_jwt
  # Make a JWT for WebRTC calling
  # Make a JWT for WebRTC calling
  # @param create_web_rtc_token Information needed to craft a JWT compatible with the platforms WebRTC APIs
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'make_a_webrtc_jwt test' do
    it 'should work' do
      
      create_web_rtc_token = @create_web_rtc_token_make_a_webrtc_jwt_test_value
      
      result = @api_instance.make_a_webrtc_jwt(
        create_web_rtc_token,
        {
          
        }
      )
      true
      expect(result).to be_a String
      
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_a_participant
  # Remove a Participant
  # @param conference_id ID of the conference this participant is in.
  # @param call_id ID of the Call associated with this participant.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_a_participant test' do
    it 'should work' do
      
      conference_id = @conference_id_remove_a_participant_test_value
      call_id = @call_id_remove_a_participant_test_value
      
      result = @api_instance.remove_a_participant(
        conference_id,call_id,
        {
          
        }
      )
      false
      
      
      expect(result).to be_nil
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_an_sms_message
  # Send an SMS Message
  # @param message_request Details to create a message
  # @param [Hash] opts the optional parameters
  # @return [MessageResult]
  describe 'send_an_sms_message test' do
    it 'should work' do
      
      message_request = @message_request_send_an_sms_message_test_value
      
      result = @api_instance.send_an_sms_message(
        message_request,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::MessageResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stream_a_recording_file
  # Stream a Recording File
  # @param recording_id String that uniquely identifies this recording resource.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'stream_a_recording_file test' do
    it 'should work' do
      
      recording_id = @recording_id_stream_a_recording_file_test_value
      
      result = @api_instance.stream_a_recording_file(
        recording_id,
        {
          
        }
      )
      false
      
      expect(result).to be_a Freeclimb::File
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_conference
  # Update a Conference
  # @param conference_id String that uniquely identifies this conference resource.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateConferenceRequest] :update_conference_request Conference Details to update
  # @return [nil]
  describe 'update_a_conference test' do
    it 'should work' do
      
      conference_id = @conference_id_update_a_conference_test_value
      update_conference_request = @update_conference_request_update_a_conference_test_value
      
      result = @api_instance.update_a_conference(
        conference_id,
        {
          :update_conference_request => update_conference_request,
        }
      )
      false
      
      
      expect(result).to be_nil
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_live_call
  # Update a Live Call
  # @param call_id String that uniquely identifies this call resource.
  # @param update_call_request Call details to update
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_a_live_call test' do
    it 'should work' do
      
      call_id = @call_id_update_a_live_call_test_value
      update_call_request = @update_call_request_update_a_live_call_test_value
      
      result = @api_instance.update_a_live_call(
        call_id,update_call_request,
        {
          
        }
      )
      false
      
      
      expect(result).to be_nil
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_participant
  # Update a Participant
  # @param conference_id ID of the conference this participant is in.
  # @param call_id ID of the Call associated with this participant.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateConferenceParticipantRequest] :update_conference_participant_request Conference participant details to update
  # @return [ConferenceParticipantResult]
  describe 'update_a_participant test' do
    it 'should work' do
      
      conference_id = @conference_id_update_a_participant_test_value
      call_id = @call_id_update_a_participant_test_value
      update_conference_participant_request = @update_conference_participant_request_update_a_participant_test_value
      
      result = @api_instance.update_a_participant(
        conference_id,call_id,
        {
          :update_conference_participant_request => update_conference_participant_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ConferenceParticipantResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_a_queue
  # Update a Queue
  # @param queue_id A string that uniquely identifies this Queue resource.
  # @param [Hash] opts the optional parameters
  # @option opts [QueueRequest] :queue_request Queue Details to update
  # @return [QueueResult]
  describe 'update_a_queue test' do
    it 'should work' do
      
      queue_id = @queue_id_update_a_queue_test_value
      queue_request = @queue_request_update_a_queue_test_value
      
      result = @api_instance.update_a_queue(
        queue_id,
        {
          :queue_request => queue_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::QueueResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_an_account
  # Manage an account
  # @param [Hash] opts the optional parameters
  # @option opts [AccountRequest] :account_request Account details to update
  # @return [nil]
  describe 'update_an_account test' do
    it 'should work' do
      
      account_request = @account_request_update_an_account_test_value
      
      result = @api_instance.update_an_account(
        
        {
          :account_request => account_request,
        }
      )
      false
      
      
      expect(result).to be_nil
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_an_application
  # Update an application
  # @param application_id A string that uniquely identifies this application resource.
  # @param [Hash] opts the optional parameters
  # @option opts [ApplicationRequest] :application_request Application details to update.
  # @return [ApplicationResult]
  describe 'update_an_application test' do
    it 'should work' do
      
      application_id = @application_id_update_an_application_test_value
      application_request = @application_request_update_an_application_test_value
      
      result = @api_instance.update_an_application(
        application_id,
        {
          :application_request => application_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::ApplicationResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_an_incoming_number
  # Update an Incoming Number
  # @param phone_number_id String that uniquely identifies this phone number resource.
  # @param [Hash] opts the optional parameters
  # @option opts [IncomingNumberRequest] :incoming_number_request Incoming Number details to update
  # @return [IncomingNumberResult]
  describe 'update_an_incoming_number test' do
    it 'should work' do
      
      phone_number_id = @phone_number_id_update_an_incoming_number_test_value
      incoming_number_request = @incoming_number_request_update_an_incoming_number_test_value
      
      result = @api_instance.update_an_incoming_number(
        phone_number_id,
        {
          :incoming_number_request => incoming_number_request,
        }
      )
      false
      
      expect(result).to be_a Freeclimb::IncomingNumberResult
      
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

# #FreeClimb API
#
# FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
#
# The version of the OpenAPI document: 1.0.0
# Contact: support@freeclimb.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.9.0
#

require "spec_helper"
require "json"
require "date"
include Freeclimb

# Unit tests for Freeclimb::TranscribeWebhook
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe Freeclimb::TranscribeWebhook do
  let(:instance) { Freeclimb::TranscribeWebhook.new }

  describe "test an instance of TranscribeWebhook" do
    it "should create an instance of TranscribeWebhook" do
      expect(instance).to be_instance_of(Freeclimb::TranscribeWebhook)
    end
  end
  describe ".deserialize" do
    it "deserializes a json payload into instance of TranscribeWebhook" do
      payload = '{ "requestType": "transcribe" }'
      expect(Freeclimb::TranscribeWebhook.deserialize(payload)).to be_instance_of(Freeclimb::TranscribeWebhook)
    end
  end

  describe 'test attribute "request_type"' do
    it "should work" do
      instance.request_type = "TEST_STRING"
      expect(instance.request_type).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "account_id"' do
    it "should work" do
      instance.account_id = "TEST_STRING"
      expect(instance.account_id).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "call_id"' do
    it "should work" do
      instance.call_id = "TEST_STRING"
      expect(instance.call_id).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "from"' do
    it "should work" do
      instance.from = "TEST_STRING"
      expect(instance.from).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "to"' do
    it "should work" do
      instance.to = "TEST_STRING"
      expect(instance.to).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "recording_id"' do
    it "should work" do
      instance.recording_id = "TEST_STRING"
      expect(instance.recording_id).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "recording_url"' do
    it "should work" do
      instance.recording_url = "TEST_STRING"
      expect(instance.recording_url).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "recording_size"' do
    it "should work" do
      instance.recording_size = 1
      expect(instance.recording_size).to eq(1)
    end
  end

  describe 'test attribute "recording_format"' do
    it "should work" do
      instance.recording_format = "TEST_STRING"
      expect(instance.recording_format).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "recording_duration_ms"' do
    it "should work" do
      instance.recording_duration_ms = 1
      expect(instance.recording_duration_ms).to eq(1)
    end
  end

  describe 'test attribute "term_reason"' do
    it "assigns value ERROR" do
      instance.term_reason = Freeclimb::TranscribeTermReason::ERROR
      expect(instance.term_reason).to eq(Freeclimb::TranscribeTermReason::ERROR)
    end
    it "assigns value COMPLETED" do
      instance.term_reason = Freeclimb::TranscribeTermReason::COMPLETED
      expect(instance.term_reason).to eq(Freeclimb::TranscribeTermReason::COMPLETED)
    end
  end

  describe 'test attribute "record_term_reason"' do
    it "assigns value FINISH_KEY" do
      instance.record_term_reason = Freeclimb::RecordUtteranceTermReason::FINISH_KEY
      expect(instance.record_term_reason).to eq(Freeclimb::RecordUtteranceTermReason::FINISH_KEY)
    end
    it "assigns value TIMEOUT" do
      instance.record_term_reason = Freeclimb::RecordUtteranceTermReason::TIMEOUT
      expect(instance.record_term_reason).to eq(Freeclimb::RecordUtteranceTermReason::TIMEOUT)
    end
    it "assigns value HANGUP" do
      instance.record_term_reason = Freeclimb::RecordUtteranceTermReason::HANGUP
      expect(instance.record_term_reason).to eq(Freeclimb::RecordUtteranceTermReason::HANGUP)
    end
    it "assigns value MAX_LENGTH" do
      instance.record_term_reason = Freeclimb::RecordUtteranceTermReason::MAX_LENGTH
      expect(instance.record_term_reason).to eq(Freeclimb::RecordUtteranceTermReason::MAX_LENGTH)
    end
  end
  describe 'test attribute "digit"' do
    it "should work" do
      instance.digit = "TEST_STRING"
      expect(instance.digit).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "privacy_for_logging"' do
    it "should work" do
      instance.privacy_for_logging = false
      expect(instance.privacy_for_logging).to eq(false)
    end
  end

  describe 'test attribute "privacy_for_recording"' do
    it "should work" do
      instance.privacy_for_recording = false
      expect(instance.privacy_for_recording).to eq(false)
    end
  end

  describe 'test attribute "barge_in_reason"' do
    it "assigns value NO_BARGE_IN" do
      instance.barge_in_reason = Freeclimb::BargeInReason::NO_BARGE_IN
      expect(instance.barge_in_reason).to eq(Freeclimb::BargeInReason::NO_BARGE_IN)
    end
    it "assigns value BARGE_IN_BY_DTMF" do
      instance.barge_in_reason = Freeclimb::BargeInReason::BARGE_IN_BY_DTMF
      expect(instance.barge_in_reason).to eq(Freeclimb::BargeInReason::BARGE_IN_BY_DTMF)
    end
    it "assigns value BARGE_IN_BY_ENERGY" do
      instance.barge_in_reason = Freeclimb::BargeInReason::BARGE_IN_BY_ENERGY
      expect(instance.barge_in_reason).to eq(Freeclimb::BargeInReason::BARGE_IN_BY_ENERGY)
    end
  end
  describe 'test attribute "barged_in_prompt_no"' do
    it "should work" do
      instance.barged_in_prompt_no = 1
      expect(instance.barged_in_prompt_no).to eq(1)
    end
  end

  describe 'test attribute "barged_in_prompt_ms"' do
    it "should work" do
      instance.barged_in_prompt_ms = 1
      expect(instance.barged_in_prompt_ms).to eq(1)
    end
  end

  describe 'test attribute "barged_in_prompt_loop_no"' do
    it "should work" do
      instance.barged_in_prompt_loop_no = 1
      expect(instance.barged_in_prompt_loop_no).to eq(1)
    end
  end

  describe 'test attribute "barge_in_time_ms"' do
    it "should work" do
      instance.barge_in_time_ms = 1
      expect(instance.barge_in_time_ms).to eq(1)
    end
  end

  describe 'test attribute "transcript"' do
    it "should work" do
      instance.transcript = "TEST_STRING"
      expect(instance.transcript).to eq("TEST_STRING")
    end
  end

  describe 'test attribute "transcribe_reason"' do
    it "assigns value INTERNAL_ERROR" do
      instance.transcribe_reason = Freeclimb::TranscribeReason::INTERNAL_ERROR
      expect(instance.transcribe_reason).to eq(Freeclimb::TranscribeReason::INTERNAL_ERROR)
    end
    it "assigns value HANGUP" do
      instance.transcribe_reason = Freeclimb::TranscribeReason::HANGUP
      expect(instance.transcribe_reason).to eq(Freeclimb::TranscribeReason::HANGUP)
    end
    it "assigns value MAX_LENGTH" do
      instance.transcribe_reason = Freeclimb::TranscribeReason::MAX_LENGTH
      expect(instance.transcribe_reason).to eq(Freeclimb::TranscribeReason::MAX_LENGTH)
    end
    it "assigns value DIGIT" do
      instance.transcribe_reason = Freeclimb::TranscribeReason::DIGIT
      expect(instance.transcribe_reason).to eq(Freeclimb::TranscribeReason::DIGIT)
    end
    it "assigns value NO_INPUT" do
      instance.transcribe_reason = Freeclimb::TranscribeReason::NO_INPUT
      expect(instance.transcribe_reason).to eq(Freeclimb::TranscribeReason::NO_INPUT)
    end
  end
  describe 'test attribute "transcription_duration_ms"' do
    it "should work" do
      instance.transcription_duration_ms = 1
      expect(instance.transcription_duration_ms).to eq(1)
    end
  end

  describe 'test method "initialize"' do
    it "properly initializes with values" do
      expect {
        Freeclimb::TranscribeWebhook.new(
          request_type: "TS",

          account_id: "TS",

          call_id: "TS",

          from: "TS",

          to: "TS",

          recording_id: "TS",

          recording_url: "TS",

          recording_size: 1,

          recording_format: "TS",

          recording_duration_ms: 1,

          term_reason: Freeclimb::TranscribeTermReason::ERROR,

          record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

          digit: "TS",

          privacy_for_logging: true,

          privacy_for_recording: true,

          barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

          barged_in_prompt_no: 1,

          barged_in_prompt_ms: 1,

          barged_in_prompt_loop_no: 1,

          barge_in_time_ms: 1,

          transcript: "TS",

          transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

          transcription_duration_ms: 1
        )
      }.not_to raise_error
    end
    it "fails to initialize with input argument that is not a hash in Freeclimb::TranscribeWebhook" do
      expect {
        Freeclimb::TranscribeWebhook.new(
          request_type: "TS",

          account_id: "TS",

          call_id: "TS",

          from: "TS",

          to: "TS",

          recording_id: "TS",

          recording_url: "TS",

          recording_size: 1,

          recording_format: "TS",

          recording_duration_ms: 1,

          term_reason: Freeclimb::TranscribeTermReason::ERROR,

          record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

          digit: "TS",

          privacy_for_logging: true,

          privacy_for_recording: true,

          barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

          barged_in_prompt_no: 1,

          barged_in_prompt_ms: 1,

          barged_in_prompt_loop_no: 1,

          barge_in_time_ms: 1,

          transcript: "TS",

          transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

          transcription_duration_ms: 1,

          invalid_attribute: true
        )
      }.to raise_error(ArgumentError)
    end
    it "fails to initialize with invalid attribute" do
      expect {
        Freeclimb::TranscribeWebhook.new(
          request_type: "TS",

          account_id: "TS",

          call_id: "TS",

          from: "TS",

          to: "TS",

          recording_id: "TS",

          recording_url: "TS",

          recording_size: 1,

          recording_format: "TS",

          recording_duration_ms: 1,

          term_reason: Freeclimb::TranscribeTermReason::ERROR,

          record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

          digit: "TS",

          privacy_for_logging: true,

          privacy_for_recording: true,

          barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

          barged_in_prompt_no: 1,

          barged_in_prompt_ms: 1,

          barged_in_prompt_loop_no: 1,

          barge_in_time_ms: 1,

          transcript: "TS",

          transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

          transcription_duration_ms: 1,

          invalid_attribute: true
        )
      }.to raise_error(ArgumentError)
    end
  end

  describe 'test method "valid"' do
    it "checks if properties are valid" do
      instance = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      expect(instance.valid?).to eq(true)
    end

    skip "checks if properties are invalid" do
      instance = Freeclimb::TranscribeWebhook.new

      expect(instance.valid?).to eq(false)
    end
  end

  describe 'test method "eql?"' do
    it "checks if objects are equal" do
      instance_1 = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      instance_2 = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      expect(instance_1.eql?(instance_2)).to eq(true)
    end

    it "checks if objects are not equal" do
      instance_1 = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 2,

        recording_format: "TS",

        recording_duration_ms: 2,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 2,

        barged_in_prompt_ms: 2,

        barged_in_prompt_loop_no: 2,

        barge_in_time_ms: 2,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 2
      )
      instance_2 = Freeclimb::TranscribeWebhook.new(
        request_type: "ST",

        account_id: "ST",

        call_id: "ST",

        from: "ST",

        to: "ST",

        recording_id: "ST",

        recording_url: "ST",

        recording_size: 1,

        recording_format: "ST",

        recording_duration_ms: 1,

        term_reason: nil,

        record_term_reason: nil,

        digit: "ST",

        privacy_for_logging: false,

        privacy_for_recording: false,

        barge_in_reason: nil,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "ST",

        transcribe_reason: nil,

        transcription_duration_ms: 1
      )
      expect(instance_1.eql?(instance_2)).to eq(false)
    end
  end

  describe 'test method "hash"' do
    it "calculates hash code" do
      instance = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      expect(instance.hash).to be_a_kind_of(Integer)
    end
  end

  describe 'test method "build_from_hash"' do
    it "builds equivalent model from hash code" do
      instance_1 = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      instance_2 = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )

      expect(instance_2.build_from_hash(instance_1.hash)).to eq(instance_1.build_from_hash(instance_1.hash))
    end
  end

  describe 'test method "_deserialize"' do
    instance = Freeclimb::TranscribeWebhook.new(
      request_type: "TS",

      account_id: "TS",

      call_id: "TS",

      from: "TS",

      to: "TS",

      recording_id: "TS",

      recording_url: "TS",

      recording_size: 1,

      recording_format: "TS",

      recording_duration_ms: 1,

      term_reason: Freeclimb::TranscribeTermReason::ERROR,

      record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

      digit: "TS",

      privacy_for_logging: true,

      privacy_for_recording: true,

      barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

      barged_in_prompt_no: 1,

      barged_in_prompt_ms: 1,

      barged_in_prompt_loop_no: 1,

      barge_in_time_ms: 1,

      transcript: "TS",

      transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

      transcription_duration_ms: 1
    )
    it "deserializes the data of request_type" do
      expect(instance._deserialize("String", instance.request_type)).to be_a_kind_of(String)
    end

    it "deserializes the data of account_id" do
      expect(instance._deserialize("String", instance.account_id)).to be_a_kind_of(String)
    end

    it "deserializes the data of call_id" do
      expect(instance._deserialize("String", instance.call_id)).to be_a_kind_of(String)
    end

    it "deserializes the data of from" do
      expect(instance._deserialize("String", instance.from)).to be_a_kind_of(String)
    end

    it "deserializes the data of to" do
      expect(instance._deserialize("String", instance.to)).to be_a_kind_of(String)
    end

    it "deserializes the data of recording_id" do
      expect(instance._deserialize("String", instance.recording_id)).to be_a_kind_of(String)
    end

    it "deserializes the data of recording_url" do
      expect(instance._deserialize("String", instance.recording_url)).to be_a_kind_of(String)
    end

    it "deserializes the data of recording_size" do
      expect(instance._deserialize("Integer", instance.recording_size)).to be_a_kind_of(Integer)
    end

    it "deserializes the data of recording_format" do
      expect(instance._deserialize("String", instance.recording_format)).to be_a_kind_of(String)
    end

    it "deserializes the data of recording_duration_ms" do
      expect(instance._deserialize("Integer", instance.recording_duration_ms)).to be_a_kind_of(Integer)
    end

    it "deserializes the data of digit" do
      expect(instance._deserialize("String", instance.digit)).to be_a_kind_of(String)
    end

    it "deserializes the data of privacy_for_logging" do
      expect(instance._deserialize("Boolean", instance.privacy_for_logging)).to be_a_kind_of(TrueClass)
    end

    it "deserializes the data of privacy_for_recording" do
      expect(instance._deserialize("Boolean", instance.privacy_for_recording)).to be_a_kind_of(TrueClass)
    end

    it "deserializes the data of barged_in_prompt_no" do
      expect(instance._deserialize("Integer", instance.barged_in_prompt_no)).to be_a_kind_of(Integer)
    end

    it "deserializes the data of barged_in_prompt_ms" do
      expect(instance._deserialize("Integer", instance.barged_in_prompt_ms)).to be_a_kind_of(Integer)
    end

    it "deserializes the data of barged_in_prompt_loop_no" do
      expect(instance._deserialize("Integer", instance.barged_in_prompt_loop_no)).to be_a_kind_of(Integer)
    end

    it "deserializes the data of barge_in_time_ms" do
      expect(instance._deserialize("Integer", instance.barge_in_time_ms)).to be_a_kind_of(Integer)
    end

    it "deserializes the data of transcript" do
      expect(instance._deserialize("String", instance.transcript)).to be_a_kind_of(String)
    end

    it "deserializes the data of transcription_duration_ms" do
      expect(instance._deserialize("Integer", instance.transcription_duration_ms)).to be_a_kind_of(Integer)
    end
  end

  describe 'test method "to_s"' do
    it "returns the string representation of the object" do
      instance = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      expect(instance.to_s).to eq(instance.to_hash.to_s)
    end
  end

  describe 'test method "to_hash"' do
    it "returns the object in the form of hash" do
      instance = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      expect(instance.to_hash).to be_a_kind_of(Hash)
    end
    it "creates equal hash for two equal objects" do
      instance_1 = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      instance_2 = Freeclimb::TranscribeWebhook.new(
        request_type: "TS",

        account_id: "TS",

        call_id: "TS",

        from: "TS",

        to: "TS",

        recording_id: "TS",

        recording_url: "TS",

        recording_size: 1,

        recording_format: "TS",

        recording_duration_ms: 1,

        term_reason: Freeclimb::TranscribeTermReason::ERROR,

        record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

        digit: "TS",

        privacy_for_logging: true,

        privacy_for_recording: true,

        barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

        barged_in_prompt_no: 1,

        barged_in_prompt_ms: 1,

        barged_in_prompt_loop_no: 1,

        barge_in_time_ms: 1,

        transcript: "TS",

        transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

        transcription_duration_ms: 1
      )
      expect(instance_1.to_hash).to eq(instance_2.to_hash)
    end
  end

  describe 'test method "_to_hash"' do
    instance = Freeclimb::TranscribeWebhook.new(
      request_type: "TS",

      account_id: "TS",

      call_id: "TS",

      from: "TS",

      to: "TS",

      recording_id: "TS",

      recording_url: "TS",

      recording_size: 1,

      recording_format: "TS",

      recording_duration_ms: 1,

      term_reason: Freeclimb::TranscribeTermReason::ERROR,

      record_term_reason: Freeclimb::RecordUtteranceTermReason::FINISH_KEY,

      digit: "TS",

      privacy_for_logging: true,

      privacy_for_recording: true,

      barge_in_reason: Freeclimb::BargeInReason::NO_BARGE_IN,

      barged_in_prompt_no: 1,

      barged_in_prompt_ms: 1,

      barged_in_prompt_loop_no: 1,

      barge_in_time_ms: 1,

      transcript: "TS",

      transcribe_reason: Freeclimb::TranscribeReason::INTERNAL_ERROR,

      transcription_duration_ms: 1
    )
    it "returns request_type in the form of hash" do
      expect(instance._to_hash(instance.request_type)).to eq(instance.request_type)
    end
    it "returns account_id in the form of hash" do
      expect(instance._to_hash(instance.account_id)).to eq(instance.account_id)
    end
    it "returns call_id in the form of hash" do
      expect(instance._to_hash(instance.call_id)).to eq(instance.call_id)
    end
    it "returns from in the form of hash" do
      expect(instance._to_hash(instance.from)).to eq(instance.from)
    end
    it "returns to in the form of hash" do
      expect(instance._to_hash(instance.to)).to eq(instance.to)
    end
    it "returns recording_id in the form of hash" do
      expect(instance._to_hash(instance.recording_id)).to eq(instance.recording_id)
    end
    it "returns recording_url in the form of hash" do
      expect(instance._to_hash(instance.recording_url)).to eq(instance.recording_url)
    end
    it "returns recording_size in the form of hash" do
      expect(instance._to_hash(instance.recording_size)).to eq(instance.recording_size)
    end
    it "returns recording_format in the form of hash" do
      expect(instance._to_hash(instance.recording_format)).to eq(instance.recording_format)
    end
    it "returns recording_duration_ms in the form of hash" do
      expect(instance._to_hash(instance.recording_duration_ms)).to eq(instance.recording_duration_ms)
    end
    it "returns term_reason in the form of hash" do
      expect(instance._to_hash(instance.term_reason)).to eq(instance.term_reason)
    end
    it "returns record_term_reason in the form of hash" do
      expect(instance._to_hash(instance.record_term_reason)).to eq(instance.record_term_reason)
    end
    it "returns digit in the form of hash" do
      expect(instance._to_hash(instance.digit)).to eq(instance.digit)
    end
    it "returns privacy_for_logging in the form of hash" do
      expect(instance._to_hash(instance.privacy_for_logging)).to eq(instance.privacy_for_logging)
    end
    it "returns privacy_for_recording in the form of hash" do
      expect(instance._to_hash(instance.privacy_for_recording)).to eq(instance.privacy_for_recording)
    end
    it "returns barge_in_reason in the form of hash" do
      expect(instance._to_hash(instance.barge_in_reason)).to eq(instance.barge_in_reason)
    end
    it "returns barged_in_prompt_no in the form of hash" do
      expect(instance._to_hash(instance.barged_in_prompt_no)).to eq(instance.barged_in_prompt_no)
    end
    it "returns barged_in_prompt_ms in the form of hash" do
      expect(instance._to_hash(instance.barged_in_prompt_ms)).to eq(instance.barged_in_prompt_ms)
    end
    it "returns barged_in_prompt_loop_no in the form of hash" do
      expect(instance._to_hash(instance.barged_in_prompt_loop_no)).to eq(instance.barged_in_prompt_loop_no)
    end
    it "returns barge_in_time_ms in the form of hash" do
      expect(instance._to_hash(instance.barge_in_time_ms)).to eq(instance.barge_in_time_ms)
    end
    it "returns transcript in the form of hash" do
      expect(instance._to_hash(instance.transcript)).to eq(instance.transcript)
    end
    it "returns transcribe_reason in the form of hash" do
      expect(instance._to_hash(instance.transcribe_reason)).to eq(instance.transcribe_reason)
    end
    it "returns transcription_duration_ms in the form of hash" do
      expect(instance._to_hash(instance.transcription_duration_ms)).to eq(instance.transcription_duration_ms)
    end
  end
end

=begin
#FreeClimb API

#FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

The version of the OpenAPI document: 1.0.0
Contact: support@freeclimb.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for Freeclimb::SMSTenDLCBrand
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe Freeclimb::SMSTenDLCBrand do
  let(:instance) { Freeclimb::SMSTenDLCBrand.new }

  describe 'test an instance of SMSTenDLCBrand' do
    it 'should create an instance of SMSTenDLCBrand' do
      expect(instance).to be_instance_of(Freeclimb::SMSTenDLCBrand)
    end
  end

  describe 'test attribute "account_id"' do
    it 'should work' do
        
          instance.account_id = "TEST_STRING"
          expect(instance.account_id).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  





  
  describe 'test attribute "entity_type"' do
    it 'assigns value PRIVATE_PROFIT' do
      instance.entity_type = "PRIVATE_PROFIT"
      expect(instance.entity_type).to eq("PRIVATE_PROFIT")  
    end
  end
  
  describe 'test attribute "entity_type"' do
    it 'assigns value PUBLIC_PROFIT' do
      instance.entity_type = "PUBLIC_PROFIT"
      expect(instance.entity_type).to eq("PUBLIC_PROFIT")  
    end
  end
  
  describe 'test attribute "entity_type"' do
    it 'assigns value NON_PROFIT' do
      instance.entity_type = "NON_PROFIT"
      expect(instance.entity_type).to eq("NON_PROFIT")  
    end
  end
  
  describe 'test attribute "entity_type"' do
    it 'assigns value GOVERNMENT' do
      instance.entity_type = "GOVERNMENT"
      expect(instance.entity_type).to eq("GOVERNMENT")  
    end
  end
  
  describe 'test attribute "entity_type"' do
    it 'assigns value SOLE_PROPRIETOR' do
      instance.entity_type = "SOLE_PROPRIETOR"
      expect(instance.entity_type).to eq("SOLE_PROPRIETOR")  
    end
  end
  


  describe 'test attribute "csp_id"' do
    it 'should work' do
        
          instance.csp_id = "TEST_STRING"
          expect(instance.csp_id).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "brand_id"' do
    it 'should work' do
        
          instance.brand_id = "TEST_STRING"
          expect(instance.brand_id).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "first_name"' do
    it 'should work' do
        
          instance.first_name = "TEST_STRING"
          expect(instance.first_name).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "last_name"' do
    it 'should work' do
        
          instance.last_name = "TEST_STRING"
          expect(instance.last_name).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "display_name"' do
    it 'should work' do
        
          instance.display_name = "TEST_STRING"
          expect(instance.display_name).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "company_name"' do
    it 'should work' do
        
          instance.company_name = "TEST_STRING"
          expect(instance.company_name).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "ein"' do
    it 'should work' do
        
          instance.ein = "TEST_STRING"
          expect(instance.ein).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "ein_issuing_country"' do
    it 'should work' do

    end
  end
  

  describe 'test attribute "ein_issuing_country"' do
    it 'should work with length 2' do
      instance.ein_issuing_country = "TS"
      expect(instance.ein_issuing_country).to eq("TS")
    end
    it 'should not work with length > 2' do
      expect{instance.ein_issuing_country = "TEST_STRING"}.to raise_error(ArgumentError)
    end
  end  


  


  describe 'test attribute "phone"' do
    it 'should work' do
        
          instance.phone = "TEST_STRING"
          expect(instance.phone).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "street"' do
    it 'should work' do
        
          instance.street = "TEST_STRING"
          expect(instance.street).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "city"' do
    it 'should work' do
        
          instance.city = "TEST_STRING"
          expect(instance.city).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "state"' do
    it 'should work' do
        
          instance.state = "TEST_STRING"
          expect(instance.state).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "postal_code"' do
    it 'should work' do
        
          instance.postal_code = "TEST_STRING"
          expect(instance.postal_code).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "country"' do
    it 'should work' do
        
          instance.country = "TEST_STRING"
          expect(instance.country).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "email"' do
    it 'should work' do
        
          instance.email = "TEST_STRING"
          expect(instance.email).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "stock_symbol"' do
    it 'should work' do
        
          instance.stock_symbol = "TEST_STRING"
          expect(instance.stock_symbol).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  





  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value NONE' do
      instance.stock_exchange = "NONE"
      expect(instance.stock_exchange).to eq("NONE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value NASDAQ' do
      instance.stock_exchange = "NASDAQ"
      expect(instance.stock_exchange).to eq("NASDAQ")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value NYSE' do
      instance.stock_exchange = "NYSE"
      expect(instance.stock_exchange).to eq("NYSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value AMEX' do
      instance.stock_exchange = "AMEX"
      expect(instance.stock_exchange).to eq("AMEX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value AMX' do
      instance.stock_exchange = "AMX"
      expect(instance.stock_exchange).to eq("AMX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value ASX' do
      instance.stock_exchange = "ASX"
      expect(instance.stock_exchange).to eq("ASX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value B3' do
      instance.stock_exchange = "B3"
      expect(instance.stock_exchange).to eq("B3")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value BME' do
      instance.stock_exchange = "BME"
      expect(instance.stock_exchange).to eq("BME")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value BSE' do
      instance.stock_exchange = "BSE"
      expect(instance.stock_exchange).to eq("BSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value FRA' do
      instance.stock_exchange = "FRA"
      expect(instance.stock_exchange).to eq("FRA")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value ICEX' do
      instance.stock_exchange = "ICEX"
      expect(instance.stock_exchange).to eq("ICEX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value JPX' do
      instance.stock_exchange = "JPX"
      expect(instance.stock_exchange).to eq("JPX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value JSE' do
      instance.stock_exchange = "JSE"
      expect(instance.stock_exchange).to eq("JSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value KRX' do
      instance.stock_exchange = "KRX"
      expect(instance.stock_exchange).to eq("KRX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value LON' do
      instance.stock_exchange = "LON"
      expect(instance.stock_exchange).to eq("LON")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value NSE' do
      instance.stock_exchange = "NSE"
      expect(instance.stock_exchange).to eq("NSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value OMX' do
      instance.stock_exchange = "OMX"
      expect(instance.stock_exchange).to eq("OMX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value SEHK' do
      instance.stock_exchange = "SEHK"
      expect(instance.stock_exchange).to eq("SEHK")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value SGX' do
      instance.stock_exchange = "SGX"
      expect(instance.stock_exchange).to eq("SGX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value SSE' do
      instance.stock_exchange = "SSE"
      expect(instance.stock_exchange).to eq("SSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value STO' do
      instance.stock_exchange = "STO"
      expect(instance.stock_exchange).to eq("STO")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value SWX' do
      instance.stock_exchange = "SWX"
      expect(instance.stock_exchange).to eq("SWX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value SZSE' do
      instance.stock_exchange = "SZSE"
      expect(instance.stock_exchange).to eq("SZSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value TSX' do
      instance.stock_exchange = "TSX"
      expect(instance.stock_exchange).to eq("TSX")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value TWSE' do
      instance.stock_exchange = "TWSE"
      expect(instance.stock_exchange).to eq("TWSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value VSE' do
      instance.stock_exchange = "VSE"
      expect(instance.stock_exchange).to eq("VSE")  
    end
  end
  
  describe 'test attribute "stock_exchange"' do
    it 'assigns value OTHER' do
      instance.stock_exchange = "OTHER"
      expect(instance.stock_exchange).to eq("OTHER")  
    end
  end
  


  describe 'test attribute "ip_address"' do
    it 'should work' do
        
          instance.ip_address = "TEST_STRING"
          expect(instance.ip_address).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "website"' do
    it 'should work' do
        
          instance.website = "TEST_STRING"
          expect(instance.website).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  





  
  describe 'test attribute "brand_relationship"' do
    it 'assigns value BASIC_ACCOUNT' do
      instance.brand_relationship = "BASIC_ACCOUNT"
      expect(instance.brand_relationship).to eq("BASIC_ACCOUNT")  
    end
  end
  
  describe 'test attribute "brand_relationship"' do
    it 'assigns value SMALL_ACCOUNT' do
      instance.brand_relationship = "SMALL_ACCOUNT"
      expect(instance.brand_relationship).to eq("SMALL_ACCOUNT")  
    end
  end
  
  describe 'test attribute "brand_relationship"' do
    it 'assigns value MEDIUM_ACCOUNT' do
      instance.brand_relationship = "MEDIUM_ACCOUNT"
      expect(instance.brand_relationship).to eq("MEDIUM_ACCOUNT")  
    end
  end
  
  describe 'test attribute "brand_relationship"' do
    it 'assigns value LARGE_ACCOUNT' do
      instance.brand_relationship = "LARGE_ACCOUNT"
      expect(instance.brand_relationship).to eq("LARGE_ACCOUNT")  
    end
  end
  
  describe 'test attribute "brand_relationship"' do
    it 'assigns value KEY_ACCOUNT' do
      instance.brand_relationship = "KEY_ACCOUNT"
      expect(instance.brand_relationship).to eq("KEY_ACCOUNT")  
    end
  end
  


  describe 'test attribute "vertical"' do
    it 'should work' do
        
          instance.vertical = "TEST_STRING"
          expect(instance.vertical).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "alt_business_id"' do
    it 'should work' do
        
          instance.alt_business_id = "TEST_STRING"
          expect(instance.alt_business_id).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  





  
  describe 'test attribute "alt_business_id_type"' do
    it 'assigns value NONE' do
      instance.alt_business_id_type = "NONE"
      expect(instance.alt_business_id_type).to eq("NONE")  
    end
  end
  
  describe 'test attribute "alt_business_id_type"' do
    it 'assigns value DUNS' do
      instance.alt_business_id_type = "DUNS"
      expect(instance.alt_business_id_type).to eq("DUNS")  
    end
  end
  
  describe 'test attribute "alt_business_id_type"' do
    it 'assigns value GIIN' do
      instance.alt_business_id_type = "GIIN"
      expect(instance.alt_business_id_type).to eq("GIIN")  
    end
  end
  
  describe 'test attribute "alt_business_id_type"' do
    it 'assigns value LEI' do
      instance.alt_business_id_type = "LEI"
      expect(instance.alt_business_id_type).to eq("LEI")  
    end
  end
  


  describe 'test attribute "universal_ein"' do
    it 'should work' do
        
          instance.universal_ein = "TEST_STRING"
          expect(instance.universal_ein).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "reference_id"' do
    it 'should work' do
        
          instance.reference_id = "TEST_STRING"
          expect(instance.reference_id).to eq("TEST_STRING")  
        
        
        

    end
  end
  



  


  describe 'test attribute "optional_attributes"' do
    it 'should work' do
        
        
        

    end
  end
  



  


  describe 'test attribute "mock"' do
    it 'should work' do
          instance.mock = false
          expect(instance.mock).to eq(false)        
        
        
        

    end
  end
  



  





  
  describe 'test attribute "identity_status"' do
    it 'assigns value SELF_DECLARED' do
      instance.identity_status = "SELF_DECLARED"
      expect(instance.identity_status).to eq("SELF_DECLARED")  
    end
  end
  
  describe 'test attribute "identity_status"' do
    it 'assigns value UNVERIFIED' do
      instance.identity_status = "UNVERIFIED"
      expect(instance.identity_status).to eq("UNVERIFIED")  
    end
  end
  
  describe 'test attribute "identity_status"' do
    it 'assigns value VERIFIED' do
      instance.identity_status = "VERIFIED"
      expect(instance.identity_status).to eq("VERIFIED")  
    end
  end
  
  describe 'test attribute "identity_status"' do
    it 'assigns value VETTED_VERIFIED' do
      instance.identity_status = "VETTED_VERIFIED"
      expect(instance.identity_status).to eq("VETTED_VERIFIED")  
    end
  end
  


  describe 'test attribute "create_date"' do
    it 'should work' do
        
        
        

    end
  end
  



  

end

=begin
#FreeClimb API

#FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

The version of the OpenAPI document: 1.0.0
Contact: support@freeclimb.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for Freeclimb::CallEndedReason
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe Freeclimb::CallEndedReason do
  let(:instance) { Freeclimb::CallEndedReason.new }

  describe 'test an instance of CallEndedReason' do
    it 'should create an instance of CallEndedReason' do
      expect(instance).to be_instance_of(Freeclimb::CallEndedReason)
    end
  end
  
  describe 'test attribute "BUSY"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::BUSY = "busy" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::BUSY
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("busy")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "busy"
      calculatedValue = Freeclimb::CallEndedReason::BUSY
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "FAILED"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::FAILED = "failed" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::FAILED
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("failed")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "failed"
      calculatedValue = Freeclimb::CallEndedReason::FAILED
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "NO_ANSWER"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::NO_ANSWER = "noAnswer" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::NO_ANSWER
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("noAnswer")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "noAnswer"
      calculatedValue = Freeclimb::CallEndedReason::NO_ANSWER
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "CALL_CANCELED"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::CALL_CANCELED = "callCanceled" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::CALL_CANCELED
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("callCanceled")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "callCanceled"
      calculatedValue = Freeclimb::CallEndedReason::CALL_CANCELED
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "FAR_END_HANGUP"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::FAR_END_HANGUP = "farEndHangup" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::FAR_END_HANGUP
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("farEndHangup")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "farEndHangup"
      calculatedValue = Freeclimb::CallEndedReason::FAR_END_HANGUP
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "APP_HANGUP"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::APP_HANGUP = "appHangup" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::APP_HANGUP
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("appHangup")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "appHangup"
      calculatedValue = Freeclimb::CallEndedReason::APP_HANGUP
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "APP_REJECT"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::APP_REJECT = "appReject" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::APP_REJECT
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("appReject")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "appReject"
      calculatedValue = Freeclimb::CallEndedReason::APP_REJECT
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "APP_NO_PERCL"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::APP_NO_PERCL = "appNoPercl" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::APP_NO_PERCL
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("appNoPercl")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "appNoPercl"
      calculatedValue = Freeclimb::CallEndedReason::APP_NO_PERCL
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "APP_INVALID_PERCL"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::APP_INVALID_PERCL = "appInvalidPercl" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::APP_INVALID_PERCL
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("appInvalidPercl")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "appInvalidPercl"
      calculatedValue = Freeclimb::CallEndedReason::APP_INVALID_PERCL
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "CONFERENCE_TERMINATED"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::CONFERENCE_TERMINATED = "conferenceTerminated" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::CONFERENCE_TERMINATED
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("conferenceTerminated")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "conferenceTerminated"
      calculatedValue = Freeclimb::CallEndedReason::CONFERENCE_TERMINATED
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "CONFERENCE_EMPTIED"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::CONFERENCE_EMPTIED = "conferenceEmptied" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::CONFERENCE_EMPTIED
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("conferenceEmptied")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "conferenceEmptied"
      calculatedValue = Freeclimb::CallEndedReason::CONFERENCE_EMPTIED
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "REMOVED_FROM_CONFERENCE"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::REMOVED_FROM_CONFERENCE = "removedFromConference" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::REMOVED_FROM_CONFERENCE
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("removedFromConference")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "removedFromConference"
      calculatedValue = Freeclimb::CallEndedReason::REMOVED_FROM_CONFERENCE
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "MACHINE_DETECTED"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::MACHINE_DETECTED = "machineDetected" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::MACHINE_DETECTED
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("machineDetected")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "machineDetected"
      calculatedValue = Freeclimb::CallEndedReason::MACHINE_DETECTED
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "WEBHOOK_FAILED"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::WEBHOOK_FAILED = "webhookFailed" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::WEBHOOK_FAILED
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("webhookFailed")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "webhookFailed"
      calculatedValue = Freeclimb::CallEndedReason::WEBHOOK_FAILED
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "WEBHOOK_INVALID_RESPONSE"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::WEBHOOK_INVALID_RESPONSE = "webhookInvalidResponse" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::WEBHOOK_INVALID_RESPONSE
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("webhookInvalidResponse")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "webhookInvalidResponse"
      calculatedValue = Freeclimb::CallEndedReason::WEBHOOK_INVALID_RESPONSE
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "VOICE_DISABLED"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::VOICE_DISABLED = "voiceDisabled" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::VOICE_DISABLED
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("voiceDisabled")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "voiceDisabled"
      calculatedValue = Freeclimb::CallEndedReason::VOICE_DISABLED
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "CONFIG_ERROR_NO_APPLICATION"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::CONFIG_ERROR_NO_APPLICATION = "configErrorNoApplication" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::CONFIG_ERROR_NO_APPLICATION
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("configErrorNoApplication")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "configErrorNoApplication"
      calculatedValue = Freeclimb::CallEndedReason::CONFIG_ERROR_NO_APPLICATION
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "CONFIG_ERROR_NO_VOICE_URL"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::CONFIG_ERROR_NO_VOICE_URL = "configErrorNoVoiceUrl" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::CONFIG_ERROR_NO_VOICE_URL
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("configErrorNoVoiceUrl")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "configErrorNoVoiceUrl"
      calculatedValue = Freeclimb::CallEndedReason::CONFIG_ERROR_NO_VOICE_URL
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "MAX_REDIRECTS_ERROR"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::MAX_REDIRECTS_ERROR = "maxRedirectsError" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::MAX_REDIRECTS_ERROR
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("maxRedirectsError")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "maxRedirectsError"
      calculatedValue = Freeclimb::CallEndedReason::MAX_REDIRECTS_ERROR
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "PERCL_PROCESSING_ERROR"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::PERCL_PROCESSING_ERROR = "perclProcessingError" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::PERCL_PROCESSING_ERROR
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("perclProcessingError")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "perclProcessingError"
      calculatedValue = Freeclimb::CallEndedReason::PERCL_PROCESSING_ERROR
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "INTERNAL_ERROR"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::INTERNAL_ERROR = "internalError" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::INTERNAL_ERROR
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("internalError")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "internalError"
      calculatedValue = Freeclimb::CallEndedReason::INTERNAL_ERROR
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "GRPC_HANGUP"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::GRPC_HANGUP = "grpcHangup" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::GRPC_HANGUP
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("grpcHangup")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "grpcHangup"
      calculatedValue = Freeclimb::CallEndedReason::GRPC_HANGUP
      expect(expectedValue).to eq(calculatedValue)
    end
  end

  describe 'test attribute "MAX_DURATION"' do
    it 'should work' do
      expect { Freeclimb::CallEndedReason::MAX_DURATION = "maxDuration" }.not_to raise_error
    end
    it 'should serialize to enum' do
      expectedValue = Freeclimb::CallEndedReason::MAX_DURATION
      calculatedValue = Freeclimb::CallEndedReason::build_from_hash("maxDuration")
      expect(expectedValue).to eq(calculatedValue)
    end
    it 'should deserialize to string' do
      expectedValue = "maxDuration"
      calculatedValue = Freeclimb::CallEndedReason::MAX_DURATION
      expect(expectedValue).to eq(calculatedValue)
    end
  end

end
